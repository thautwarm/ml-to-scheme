# this file is auto-generated by RBNF.hs and the Python package rbnf-rts

from rbnf_rts.rbnf_linker import link
from rbnf_rts.utils import ImmutableMap
from rbnf_rts.lexical import *
__all__ = ['lexicals', 'run_lexer', 'mk_parser']
(lexicals, run_lexer) = lexer(r(number='[-+]?[0-9]+(\\.[eE][-+]?\\d+)?'), r(space='\\s'), r(str='"([^\\\\"]+|\\\\.)*?"'), r(cons='#'), r(chr="'.*?'"), r(sym='\\:[^\\s\\:\\(\\)\\,\\[\\]\\"\\;\\#]+|\\:\\([^\\s\\(\\)\\,\\[\\]\\"\\;\\#]+\\)'), r(identifier='[^\\(\\)\\"\\s,\\\'\\[\\]\\|\\&\\`\\;\\#]+'), l['||'], l['|'], l['`'], l[']'], l['['], l[';'], l[','], l[')'], l['('], l['&&'], l['&'], ignores=['space'], reserved_map=ImmutableMap.from_dict({'do': 'quote do', 'let': 'quote let', 'rec': 'quote rec', '=': 'quote =', 'open': 'quote open', ';': 'quote ;', '||': 'quote ||', '&&': 'quote &&', '`': 'quote `', ',': 'quote ,', 'in': 'quote in', 'if': 'quote if', 'then': 'quote then', 'else': 'quote else', '(': 'quote (', ')': 'quote )', 'fn': 'quote fn', '->': 'quote ->', 'end': 'quote end', 'true': 'quote true', 'false': 'quote false', '[': 'quote [', ']': 'quote ]', 'match': 'quote match', 'with': 'quote with', '|': 'quote |', 'when': 'quote when', '&': 'quote &'}), numbering={'BOF': 0, 'EOF': 1, 'quote do': 2, 'quote let': 3, 'quote rec': 4, 'quote =': 5, 'quote open': 6, 'quote ;': 7, 'quote ||': 8, 'quote &&': 9, 'quote `': 10, 'quote ,': 11, 'quote in': 12, 'quote if': 13, 'quote then': 14, 'quote else': 15, 'quote (': 16, 'quote )': 17, 'quote fn': 18, 'quote ->': 19, 'quote end': 20, 'quote true': 21, 'quote false': 22, 'quote [': 23, 'quote ]': 24, 'quote match': 25, 'quote with': 26, 'quote |': 27, 'quote when': 28, 'quote &': 29, 'number': 30, 'space': 31, 'str': 32, 'cons': 33, 'chr': 34, 'sym': 35, 'identifier': 36})



def mk_parser(MKIdent, MKNum, MKStr, MKBool, MKSym, And, Or, none, true, false, list, Top, Cons, nil, MKLRList, Let, Do, OpenString, OpenId, BlockExpr, LetExp, App, Lam, IfExp, BoolExpr, SymExpr, ChrExpr, StrExpr, NumExpr, Match, MKLRCommaList, Tuple0, Tuple1, Tuple2, Tuple3, List, MKOrCase, MKAndCase, BoolCase, NumCase, SymCase, StrCase, ChrCase, ListCase):
    from rbnf_rts.rts import AST as prim__mk__ast, Cons as prim__cons, _nil as prim__nil

    def lr_step_AndCase(_slot_0, prim__state, prim__tokens):
        lcl_0 = 29
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote & not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = (_slot_0, _slot_1)
            _slot_local__1 = lcl_0
            lcl_0 = parse_AtomCase(prim__state, prim__tokens)
            _slot_2_check = lcl_0
            lcl_0 = _slot_2_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_2_check
            else:
                lcl_0 = _slot_2_check[1]
                lcl_0 = lcl_0
                _slot_2 = lcl_0
                lcl_0 = (_slot_local__1, _slot_2)
                lcl_0 = prim__mk__ast('AndCase', lcl_0)
                _slot_local__2 = lcl_0
                lcl_0 = (True, _slot_local__2)
        return lcl_0

    def lr_loop_AndCase(_slot_0, prim__state, prim__tokens):
        lr_AndCase_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_AndCase(lr_AndCase_reduce, prim__state, prim__tokens)
        lr_AndCase_try = lcl_0
        lcl_0 = lr_AndCase_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_AndCase_try[1]
            lcl_0 = lcl_0
            lr_AndCase_reduce = lcl_0
            lcl_0 = lr_step_AndCase(lr_AndCase_reduce, prim__state, prim__tokens)
            lr_AndCase_try = lcl_0
            lcl_0 = lr_AndCase_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_AndCase_reduce

    def lr_step_AndExpRoot(_slot_0, prim__state, prim__tokens):
        lcl_0 = 9
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote && not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = (_slot_0, _slot_1)
            _slot_local__1 = lcl_0
            lcl_0 = parse_BinOp(prim__state, prim__tokens)
            _slot_2_check = lcl_0
            lcl_0 = _slot_2_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_2_check
            else:
                lcl_0 = _slot_2_check[1]
                lcl_0 = lcl_0
                _slot_2 = lcl_0
                lcl_0 = (_slot_local__1, _slot_2)
                lcl_0 = prim__mk__ast('AndExpRoot', lcl_0)
                _slot_local__2 = lcl_0
                lcl_0 = (True, _slot_local__2)
        return lcl_0

    def lr_loop_AndExpRoot(_slot_0, prim__state, prim__tokens):
        lr_AndExpRoot_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_AndExpRoot(lr_AndExpRoot_reduce, prim__state, prim__tokens)
        lr_AndExpRoot_try = lcl_0
        lcl_0 = lr_AndExpRoot_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_AndExpRoot_try[1]
            lcl_0 = lcl_0
            lr_AndExpRoot_reduce = lcl_0
            lcl_0 = lr_step_AndExpRoot(lr_AndExpRoot_reduce, prim__state, prim__tokens)
            lr_AndExpRoot_try = lcl_0
            lcl_0 = lr_AndExpRoot_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_AndExpRoot_reduce

    def lr_step_App(_slot_0, prim__state, prim__tokens):
        App_f_0 = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 35):
                lcl_2 = parse_Lit(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = lcl_2
                    _slot_1 = lcl_2
                    App_arg_1 = _slot_1
                    lcl_2 = Tuple1(App_arg_1)
                    lcl_2 = App(App_f_0, lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 32):
                lcl_2 = parse_Lit(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = lcl_3
                    _slot_1 = lcl_3
                    App_arg_1 = _slot_1
                    lcl_3 = Tuple1(App_arg_1)
                    lcl_3 = App(App_f_0, lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 21):
                lcl_2 = parse_Lit(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_3 = _slot_1_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = lcl_2
                    _slot_1 = lcl_2
                    App_arg_1 = _slot_1
                    lcl_2 = Tuple1(App_arg_1)
                    lcl_2 = App(App_f_0, lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 22):
                lcl_2 = parse_Lit(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = lcl_3
                    _slot_1 = lcl_3
                    App_arg_1 = _slot_1
                    lcl_3 = Tuple1(App_arg_1)
                    lcl_3 = App(App_f_0, lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 23):
                lcl_2 = parse_Lit(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_3 = _slot_1_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = lcl_2
                    _slot_1 = lcl_2
                    App_arg_1 = _slot_1
                    lcl_2 = Tuple1(App_arg_1)
                    lcl_2 = App(App_f_0, lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 16):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_1 = lcl_2
                lcl_2 = prim__tokens.offset
                _off_1 = lcl_2
                lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_2:
                    lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_4 = lcl_4.idint
                    if (lcl_4 == 35):
                        lcl_4 = parse_CommaExps(prim__state, prim__tokens)
                        _slot_2_check = lcl_4
                        lcl_4 = _slot_2_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            App_args_2 = _slot_2
                            lcl_4 = 17
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_4):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_4 = _py_local_tk
                            _slot_3 = lcl_4
                            lcl_4 = (_slot_3 is None)
                            if lcl_4:
                                lcl_4 = prim__tokens.offset
                                lcl_4 = (lcl_4, 'quote ) not match')
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = lcl_4
                                lcl_4 = (False, lcl_4)
                            else:
                                lcl_4 = MKLRCommaList(App_args_2)
                                lcl_4 = App(App_f_0, lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    elif (lcl_4 == 32):
                        lcl_4 = parse_CommaExps(prim__state, prim__tokens)
                        _slot_2_check = lcl_4
                        lcl_4 = _slot_2_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            App_args_2 = _slot_2
                            lcl_4 = 17
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_4):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_4 = _py_local_tk
                            _slot_3 = lcl_4
                            lcl_4 = (_slot_3 is None)
                            if lcl_4:
                                lcl_4 = prim__tokens.offset
                                lcl_4 = (lcl_4, 'quote ) not match')
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = lcl_4
                                lcl_4 = (False, lcl_4)
                            else:
                                lcl_4 = MKLRCommaList(App_args_2)
                                lcl_4 = App(App_f_0, lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    elif (lcl_4 == 21):
                        lcl_4 = parse_CommaExps(prim__state, prim__tokens)
                        _slot_2_check = lcl_4
                        lcl_4 = _slot_2_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            App_args_2 = _slot_2
                            lcl_4 = 17
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_4):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_4 = _py_local_tk
                            _slot_3 = lcl_4
                            lcl_4 = (_slot_3 is None)
                            if lcl_4:
                                lcl_4 = prim__tokens.offset
                                lcl_4 = (lcl_4, 'quote ) not match')
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = lcl_4
                                lcl_4 = (False, lcl_4)
                            else:
                                lcl_4 = MKLRCommaList(App_args_2)
                                lcl_4 = App(App_f_0, lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    elif (lcl_4 == 25):
                        lcl_4 = parse_CommaExps(prim__state, prim__tokens)
                        _slot_2_check = lcl_4
                        lcl_4 = _slot_2_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            App_args_2 = _slot_2
                            lcl_4 = 17
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_4):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_4 = _py_local_tk
                            _slot_3 = lcl_4
                            lcl_4 = (_slot_3 is None)
                            if lcl_4:
                                lcl_4 = prim__tokens.offset
                                lcl_4 = (lcl_4, 'quote ) not match')
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = lcl_4
                                lcl_4 = (False, lcl_4)
                            else:
                                lcl_4 = MKLRCommaList(App_args_2)
                                lcl_4 = App(App_f_0, lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    elif (lcl_4 == 3):
                        lcl_4 = parse_CommaExps(prim__state, prim__tokens)
                        _slot_2_check = lcl_4
                        lcl_4 = _slot_2_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            App_args_2 = _slot_2
                            lcl_4 = 17
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_4):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_4 = _py_local_tk
                            _slot_3 = lcl_4
                            lcl_4 = (_slot_3 is None)
                            if lcl_4:
                                lcl_4 = prim__tokens.offset
                                lcl_4 = (lcl_4, 'quote ) not match')
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = lcl_4
                                lcl_4 = (False, lcl_4)
                            else:
                                lcl_4 = MKLRCommaList(App_args_2)
                                lcl_4 = App(App_f_0, lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    elif (lcl_4 == 13):
                        lcl_4 = parse_CommaExps(prim__state, prim__tokens)
                        _slot_2_check = lcl_4
                        lcl_4 = _slot_2_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            App_args_2 = _slot_2
                            lcl_4 = 17
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_4):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_4 = _py_local_tk
                            _slot_3 = lcl_4
                            lcl_4 = (_slot_3 is None)
                            if lcl_4:
                                lcl_4 = prim__tokens.offset
                                lcl_4 = (lcl_4, 'quote ) not match')
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = lcl_4
                                lcl_4 = (False, lcl_4)
                            else:
                                lcl_4 = MKLRCommaList(App_args_2)
                                lcl_4 = App(App_f_0, lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    elif (lcl_4 == 18):
                        lcl_4 = parse_CommaExps(prim__state, prim__tokens)
                        _slot_2_check = lcl_4
                        lcl_4 = _slot_2_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            App_args_2 = _slot_2
                            lcl_4 = 17
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_4):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_4 = _py_local_tk
                            _slot_3 = lcl_4
                            lcl_4 = (_slot_3 is None)
                            if lcl_4:
                                lcl_4 = prim__tokens.offset
                                lcl_4 = (lcl_4, 'quote ) not match')
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = lcl_4
                                lcl_4 = (False, lcl_4)
                            else:
                                lcl_4 = MKLRCommaList(App_args_2)
                                lcl_4 = App(App_f_0, lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    elif (lcl_4 == 22):
                        lcl_4 = parse_CommaExps(prim__state, prim__tokens)
                        _slot_2_check = lcl_4
                        lcl_4 = _slot_2_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            App_args_2 = _slot_2
                            lcl_4 = 17
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_4):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_4 = _py_local_tk
                            _slot_3 = lcl_4
                            lcl_4 = (_slot_3 is None)
                            if lcl_4:
                                lcl_4 = prim__tokens.offset
                                lcl_4 = (lcl_4, 'quote ) not match')
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = lcl_4
                                lcl_4 = (False, lcl_4)
                            else:
                                lcl_4 = MKLRCommaList(App_args_2)
                                lcl_4 = App(App_f_0, lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    elif (lcl_4 == 23):
                        lcl_4 = parse_CommaExps(prim__state, prim__tokens)
                        _slot_2_check = lcl_4
                        lcl_4 = _slot_2_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_2_check
                        else:
                            lcl_4 = _slot_2_check[1]
                            lcl_4 = lcl_4
                            _slot_2 = lcl_4
                            App_args_2 = _slot_2
                            lcl_4 = 17
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_4):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_4 = _py_local_tk
                            _slot_3 = lcl_4
                            lcl_4 = (_slot_3 is None)
                            if lcl_4:
                                lcl_4 = prim__tokens.offset
                                lcl_4 = (lcl_4, 'quote ) not match')
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = lcl_4
                                lcl_4 = (False, lcl_4)
                            else:
                                lcl_4 = MKLRCommaList(App_args_2)
                                lcl_4 = App(App_f_0, lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    elif (lcl_4 == 17):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_4 = _py_local_t
                        _slot_2 = lcl_4
                        lcl_4 = App(App_f_0, Tuple0)
                        _slot_local__1 = lcl_4
                        lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    elif (lcl_4 == 16):
                        lcl_4 = parse_CommaExps(prim__state, prim__tokens)
                        _slot_2_check = lcl_4
                        lcl_4 = _slot_2_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_2_check
                        else:
                            lcl_5 = _slot_2_check[1]
                            lcl_5 = lcl_5
                            _slot_2 = lcl_5
                            App_args_2 = _slot_2
                            lcl_5 = 17
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_5):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_5 = _py_local_tk
                            _slot_3 = lcl_5
                            lcl_5 = (_slot_3 is None)
                            if lcl_5:
                                lcl_5 = prim__tokens.offset
                                lcl_5 = (lcl_5, 'quote ) not match')
                                lcl_5 = prim__cons(lcl_5, prim__nil)
                                lcl_5 = lcl_5
                                lcl_5 = (False, lcl_5)
                            else:
                                lcl_5 = MKLRCommaList(App_args_2)
                                lcl_5 = App(App_f_0, lcl_5)
                                _slot_local__1 = lcl_5
                                lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    elif (lcl_4 == 30):
                        lcl_4 = parse_CommaExps(prim__state, prim__tokens)
                        _slot_2_check = lcl_4
                        lcl_4 = _slot_2_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_2_check
                        else:
                            lcl_5 = _slot_2_check[1]
                            lcl_5 = lcl_5
                            _slot_2 = lcl_5
                            App_args_2 = _slot_2
                            lcl_5 = 17
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_5):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_5 = _py_local_tk
                            _slot_3 = lcl_5
                            lcl_5 = (_slot_3 is None)
                            if lcl_5:
                                lcl_5 = prim__tokens.offset
                                lcl_5 = (lcl_5, 'quote ) not match')
                                lcl_5 = prim__cons(lcl_5, prim__nil)
                                lcl_5 = lcl_5
                                lcl_5 = (False, lcl_5)
                            else:
                                lcl_5 = MKLRCommaList(App_args_2)
                                lcl_5 = App(App_f_0, lcl_5)
                                _slot_local__1 = lcl_5
                                lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    elif (lcl_4 == 36):
                        lcl_4 = parse_CommaExps(prim__state, prim__tokens)
                        _slot_2_check = lcl_4
                        lcl_4 = _slot_2_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_2_check
                        else:
                            lcl_5 = _slot_2_check[1]
                            lcl_5 = lcl_5
                            _slot_2 = lcl_5
                            App_args_2 = _slot_2
                            lcl_5 = 17
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_5):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_5 = _py_local_tk
                            _slot_3 = lcl_5
                            lcl_5 = (_slot_3 is None)
                            if lcl_5:
                                lcl_5 = prim__tokens.offset
                                lcl_5 = (lcl_5, 'quote ) not match')
                                lcl_5 = prim__cons(lcl_5, prim__nil)
                                lcl_5 = lcl_5
                                lcl_5 = (False, lcl_5)
                            else:
                                lcl_5 = MKLRCommaList(App_args_2)
                                lcl_5 = App(App_f_0, lcl_5)
                                _slot_local__1 = lcl_5
                                lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    elif (lcl_4 == 34):
                        lcl_4 = parse_CommaExps(prim__state, prim__tokens)
                        _slot_2_check = lcl_4
                        lcl_4 = _slot_2_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_2_check
                        else:
                            lcl_5 = _slot_2_check[1]
                            lcl_5 = lcl_5
                            _slot_2 = lcl_5
                            App_args_2 = _slot_2
                            lcl_5 = 17
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_5):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_5 = _py_local_tk
                            _slot_3 = lcl_5
                            lcl_5 = (_slot_3 is None)
                            if lcl_5:
                                lcl_5 = prim__tokens.offset
                                lcl_5 = (lcl_5, 'quote ) not match')
                                lcl_5 = prim__cons(lcl_5, prim__nil)
                                lcl_5 = lcl_5
                                lcl_5 = (False, lcl_5)
                            else:
                                lcl_5 = MKLRCommaList(App_args_2)
                                lcl_5 = App(App_f_0, lcl_5)
                                _slot_local__1 = lcl_5
                                lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    else:
                        lcl_4 = (_off_1, 'App lookahead failed')
                        lcl_4 = prim__cons(lcl_4, prim__nil)
                        lcl_4 = lcl_4
                        lcl_4 = (False, lcl_4)
                        lcl_3 = lcl_4
                    lcl_2 = lcl_3
                else:
                    lcl_3 = (_off_1, 'App got EOF')
                    lcl_4 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = lcl_4
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 30):
                lcl_2 = parse_Lit(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = lcl_3
                    _slot_1 = lcl_3
                    App_arg_1 = _slot_1
                    lcl_3 = Tuple1(App_arg_1)
                    lcl_3 = App(App_f_0, lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 36):
                lcl_2 = parse_Lit(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_3 = _slot_1_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = lcl_2
                    _slot_1 = lcl_2
                    App_arg_1 = _slot_1
                    lcl_2 = Tuple1(App_arg_1)
                    lcl_2 = App(App_f_0, lcl_2)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 34):
                lcl_2 = parse_Lit(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = lcl_3
                    _slot_1 = lcl_3
                    App_arg_1 = _slot_1
                    lcl_3 = Tuple1(App_arg_1)
                    lcl_3 = App(App_f_0, lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'App lookahead failed')
                lcl_3 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_3
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'App got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_App(_slot_0, prim__state, prim__tokens):
        lr_App_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_App(lr_App_reduce, prim__state, prim__tokens)
        lr_App_try = lcl_0
        lcl_0 = lr_App_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_App_try[1]
            lcl_0 = lcl_0
            lr_App_reduce = lcl_0
            lcl_0 = lr_step_App(lr_App_reduce, prim__state, prim__tokens)
            lr_App_try = lcl_0
            lcl_0 = lr_App_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_App_reduce

    def lr_step_BinOp(_slot_0, prim__state, prim__tokens):
        BinOp_left_0 = _slot_0
        lcl_0 = 10
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote ` not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_Id(prim__state, prim__tokens)
            _slot_2_check = lcl_0
            lcl_0 = _slot_2_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_2_check
            else:
                lcl_1 = _slot_2_check[1]
                lcl_1 = lcl_1
                _slot_2 = lcl_1
                BinOp_op_1 = _slot_2
                lcl_1 = 10
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_1):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_1 = _py_local_tk
                _slot_3 = lcl_1
                lcl_1 = (_slot_3 is None)
                if lcl_1:
                    lcl_1 = prim__tokens.offset
                    lcl_1 = (lcl_1, 'quote ` not match')
                    lcl_1 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = lcl_1
                    lcl_1 = (False, lcl_1)
                else:
                    lcl_1 = prim__tokens.offset
                    _off_2 = lcl_1
                    lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_1:
                        lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_2 = lcl_2.idint
                        if (lcl_2 == 35):
                            lcl_2 = parse_App(prim__state, prim__tokens)
                            _slot_4_check = lcl_2
                            lcl_2 = _slot_4_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_4_check
                            else:
                                lcl_2 = _slot_4_check[1]
                                lcl_2 = lcl_2
                                _slot_4 = lcl_2
                                BinOp_right_3 = _slot_4
                                lcl_2 = Tuple2(BinOp_left_0, BinOp_right_3)
                                lcl_2 = App(BinOp_op_1, lcl_2)
                                _slot_local__1 = lcl_2
                                lcl_2 = (True, _slot_local__1)
                            lcl_1 = lcl_2
                        elif (lcl_2 == 32):
                            lcl_2 = parse_App(prim__state, prim__tokens)
                            _slot_4_check = lcl_2
                            lcl_2 = _slot_4_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_4_check
                            else:
                                lcl_3 = _slot_4_check[1]
                                lcl_3 = lcl_3
                                _slot_4 = lcl_3
                                BinOp_right_3 = _slot_4
                                lcl_3 = Tuple2(BinOp_left_0, BinOp_right_3)
                                lcl_3 = App(BinOp_op_1, lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                        elif (lcl_2 == 21):
                            lcl_2 = parse_App(prim__state, prim__tokens)
                            _slot_4_check = lcl_2
                            lcl_3 = _slot_4_check[0]
                            lcl_2 = (lcl_3 is False)
                            if lcl_2:
                                lcl_2 = _slot_4_check
                            else:
                                lcl_2 = _slot_4_check[1]
                                lcl_2 = lcl_2
                                _slot_4 = lcl_2
                                BinOp_right_3 = _slot_4
                                lcl_2 = Tuple2(BinOp_left_0, BinOp_right_3)
                                lcl_2 = App(BinOp_op_1, lcl_2)
                                _slot_local__1 = lcl_2
                                lcl_2 = (True, _slot_local__1)
                            lcl_1 = lcl_2
                        elif (lcl_2 == 25):
                            lcl_2 = parse_App(prim__state, prim__tokens)
                            _slot_4_check = lcl_2
                            lcl_2 = _slot_4_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_4_check
                            else:
                                lcl_3 = _slot_4_check[1]
                                lcl_3 = lcl_3
                                _slot_4 = lcl_3
                                BinOp_right_3 = _slot_4
                                lcl_3 = Tuple2(BinOp_left_0, BinOp_right_3)
                                lcl_3 = App(BinOp_op_1, lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                        elif (lcl_2 == 3):
                            lcl_2 = parse_LetExp(prim__state, prim__tokens)
                            _slot_4_check = lcl_2
                            lcl_3 = _slot_4_check[0]
                            lcl_2 = (lcl_3 is False)
                            if lcl_2:
                                lcl_2 = _slot_4_check
                            else:
                                lcl_2 = _slot_4_check[1]
                                lcl_2 = lcl_2
                                _slot_4 = lcl_2
                                BinOp_right_3 = _slot_4
                                lcl_2 = Tuple2(BinOp_left_0, BinOp_right_3)
                                lcl_2 = App(BinOp_op_1, lcl_2)
                                _slot_local__1 = lcl_2
                                lcl_2 = (True, _slot_local__1)
                            lcl_1 = lcl_2
                        elif (lcl_2 == 13):
                            lcl_2 = parse_IfExp(prim__state, prim__tokens)
                            _slot_4_check = lcl_2
                            lcl_2 = _slot_4_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_4_check
                            else:
                                lcl_3 = _slot_4_check[1]
                                lcl_3 = lcl_3
                                _slot_4 = lcl_3
                                BinOp_right_3 = _slot_4
                                lcl_3 = Tuple2(BinOp_left_0, BinOp_right_3)
                                lcl_3 = App(BinOp_op_1, lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                        elif (lcl_2 == 18):
                            lcl_2 = parse_App(prim__state, prim__tokens)
                            _slot_4_check = lcl_2
                            lcl_3 = _slot_4_check[0]
                            lcl_2 = (lcl_3 is False)
                            if lcl_2:
                                lcl_2 = _slot_4_check
                            else:
                                lcl_2 = _slot_4_check[1]
                                lcl_2 = lcl_2
                                _slot_4 = lcl_2
                                BinOp_right_3 = _slot_4
                                lcl_2 = Tuple2(BinOp_left_0, BinOp_right_3)
                                lcl_2 = App(BinOp_op_1, lcl_2)
                                _slot_local__1 = lcl_2
                                lcl_2 = (True, _slot_local__1)
                            lcl_1 = lcl_2
                        elif (lcl_2 == 22):
                            lcl_2 = parse_App(prim__state, prim__tokens)
                            _slot_4_check = lcl_2
                            lcl_2 = _slot_4_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_4_check
                            else:
                                lcl_3 = _slot_4_check[1]
                                lcl_3 = lcl_3
                                _slot_4 = lcl_3
                                BinOp_right_3 = _slot_4
                                lcl_3 = Tuple2(BinOp_left_0, BinOp_right_3)
                                lcl_3 = App(BinOp_op_1, lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                        elif (lcl_2 == 23):
                            lcl_2 = parse_App(prim__state, prim__tokens)
                            _slot_4_check = lcl_2
                            lcl_3 = _slot_4_check[0]
                            lcl_2 = (lcl_3 is False)
                            if lcl_2:
                                lcl_2 = _slot_4_check
                            else:
                                lcl_2 = _slot_4_check[1]
                                lcl_2 = lcl_2
                                _slot_4 = lcl_2
                                BinOp_right_3 = _slot_4
                                lcl_2 = Tuple2(BinOp_left_0, BinOp_right_3)
                                lcl_2 = App(BinOp_op_1, lcl_2)
                                _slot_local__1 = lcl_2
                                lcl_2 = (True, _slot_local__1)
                            lcl_1 = lcl_2
                        elif (lcl_2 == 16):
                            lcl_2 = parse_App(prim__state, prim__tokens)
                            _slot_4_check = lcl_2
                            lcl_2 = _slot_4_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_4_check
                            else:
                                lcl_3 = _slot_4_check[1]
                                lcl_3 = lcl_3
                                _slot_4 = lcl_3
                                BinOp_right_3 = _slot_4
                                lcl_3 = Tuple2(BinOp_left_0, BinOp_right_3)
                                lcl_3 = App(BinOp_op_1, lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                        elif (lcl_2 == 30):
                            lcl_2 = parse_App(prim__state, prim__tokens)
                            _slot_4_check = lcl_2
                            lcl_3 = _slot_4_check[0]
                            lcl_2 = (lcl_3 is False)
                            if lcl_2:
                                lcl_2 = _slot_4_check
                            else:
                                lcl_2 = _slot_4_check[1]
                                lcl_2 = lcl_2
                                _slot_4 = lcl_2
                                BinOp_right_3 = _slot_4
                                lcl_2 = Tuple2(BinOp_left_0, BinOp_right_3)
                                lcl_2 = App(BinOp_op_1, lcl_2)
                                _slot_local__1 = lcl_2
                                lcl_2 = (True, _slot_local__1)
                            lcl_1 = lcl_2
                        elif (lcl_2 == 36):
                            lcl_2 = parse_App(prim__state, prim__tokens)
                            _slot_4_check = lcl_2
                            lcl_2 = _slot_4_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_4_check
                            else:
                                lcl_3 = _slot_4_check[1]
                                lcl_3 = lcl_3
                                _slot_4 = lcl_3
                                BinOp_right_3 = _slot_4
                                lcl_3 = Tuple2(BinOp_left_0, BinOp_right_3)
                                lcl_3 = App(BinOp_op_1, lcl_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                        elif (lcl_2 == 34):
                            lcl_2 = parse_App(prim__state, prim__tokens)
                            _slot_4_check = lcl_2
                            lcl_3 = _slot_4_check[0]
                            lcl_2 = (lcl_3 is False)
                            if lcl_2:
                                lcl_2 = _slot_4_check
                            else:
                                lcl_2 = _slot_4_check[1]
                                lcl_2 = lcl_2
                                _slot_4 = lcl_2
                                BinOp_right_3 = _slot_4
                                lcl_2 = Tuple2(BinOp_left_0, BinOp_right_3)
                                lcl_2 = App(BinOp_op_1, lcl_2)
                                _slot_local__1 = lcl_2
                                lcl_2 = (True, _slot_local__1)
                            lcl_1 = lcl_2
                        else:
                            lcl_2 = (_off_2, 'BinOp lookahead failed')
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_2
                            lcl_2 = (False, lcl_2)
                            lcl_1 = lcl_2
                    else:
                        lcl_1 = (_off_2, 'BinOp got EOF')
                        lcl_2 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = lcl_2
                        lcl_1 = (False, lcl_1)
                lcl_0 = lcl_1
        return lcl_0

    def lr_loop_BinOp(_slot_0, prim__state, prim__tokens):
        lr_BinOp_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_BinOp(lr_BinOp_reduce, prim__state, prim__tokens)
        lr_BinOp_try = lcl_0
        lcl_0 = lr_BinOp_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_BinOp_try[1]
            lcl_0 = lcl_0
            lr_BinOp_reduce = lcl_0
            lcl_0 = lr_step_BinOp(lr_BinOp_reduce, prim__state, prim__tokens)
            lr_BinOp_try = lcl_0
            lcl_0 = lr_BinOp_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_BinOp_reduce

    def lr_step_BlockExp(_slot_0, prim__state, prim__tokens):
        lcl_0 = 7
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote ; not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = (_slot_0, _slot_1)
            _slot_local__1 = lcl_0
            lcl_0 = parse_OrExp(prim__state, prim__tokens)
            _slot_2_check = lcl_0
            lcl_0 = _slot_2_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_2_check
            else:
                lcl_0 = _slot_2_check[1]
                lcl_0 = lcl_0
                _slot_2 = lcl_0
                lcl_0 = (_slot_local__1, _slot_2)
                lcl_0 = prim__mk__ast('BlockExp', lcl_0)
                _slot_local__2 = lcl_0
                lcl_0 = (True, _slot_local__2)
        return lcl_0

    def lr_loop_BlockExp(_slot_0, prim__state, prim__tokens):
        lr_BlockExp_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_BlockExp(lr_BlockExp_reduce, prim__state, prim__tokens)
        lr_BlockExp_try = lcl_0
        lcl_0 = lr_BlockExp_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_BlockExp_try[1]
            lcl_0 = lcl_0
            lr_BlockExp_reduce = lcl_0
            lcl_0 = lr_step_BlockExp(lr_BlockExp_reduce, prim__state, prim__tokens)
            lr_BlockExp_try = lcl_0
            lcl_0 = lr_BlockExp_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_BlockExp_reduce

    def lr_step_CaseExps(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_CaseExp(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_0 = _slot_1_check[1]
            lcl_0 = lcl_0
            _slot_1 = lcl_0
            lcl_0 = (_slot_0, _slot_1)
            lcl_0 = prim__mk__ast('CaseExps', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def lr_loop_CaseExps(_slot_0, prim__state, prim__tokens):
        lr_CaseExps_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_CaseExps(lr_CaseExps_reduce, prim__state, prim__tokens)
        lr_CaseExps_try = lcl_0
        lcl_0 = lr_CaseExps_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_CaseExps_try[1]
            lcl_0 = lcl_0
            lr_CaseExps_reduce = lcl_0
            lcl_0 = lr_step_CaseExps(lr_CaseExps_reduce, prim__state, prim__tokens)
            lr_CaseExps_try = lcl_0
            lcl_0 = lr_CaseExps_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_CaseExps_reduce

    def lr_step_CommaCases(_slot_0, prim__state, prim__tokens):
        lcl_0 = 11
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote , not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = (_slot_0, _slot_1)
            _slot_local__1 = lcl_0
            lcl_0 = parse_Case(prim__state, prim__tokens)
            _slot_2_check = lcl_0
            lcl_0 = _slot_2_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_2_check
            else:
                lcl_0 = _slot_2_check[1]
                lcl_0 = lcl_0
                _slot_2 = lcl_0
                lcl_0 = (_slot_local__1, _slot_2)
                lcl_0 = prim__mk__ast('CommaCases', lcl_0)
                _slot_local__2 = lcl_0
                lcl_0 = (True, _slot_local__2)
        return lcl_0

    def lr_loop_CommaCases(_slot_0, prim__state, prim__tokens):
        lr_CommaCases_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_CommaCases(lr_CommaCases_reduce, prim__state, prim__tokens)
        lr_CommaCases_try = lcl_0
        lcl_0 = lr_CommaCases_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_CommaCases_try[1]
            lcl_0 = lcl_0
            lr_CommaCases_reduce = lcl_0
            lcl_0 = lr_step_CommaCases(lr_CommaCases_reduce, prim__state, prim__tokens)
            lr_CommaCases_try = lcl_0
            lcl_0 = lr_CommaCases_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_CommaCases_reduce

    def lr_step_CommaExps(_slot_0, prim__state, prim__tokens):
        lcl_0 = 11
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote , not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = (_slot_0, _slot_1)
            _slot_local__1 = lcl_0
            lcl_0 = parse_Exp(prim__state, prim__tokens)
            _slot_2_check = lcl_0
            lcl_0 = _slot_2_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_2_check
            else:
                lcl_0 = _slot_2_check[1]
                lcl_0 = lcl_0
                _slot_2 = lcl_0
                lcl_0 = (_slot_local__1, _slot_2)
                lcl_0 = prim__mk__ast('CommaExps', lcl_0)
                _slot_local__2 = lcl_0
                lcl_0 = (True, _slot_local__2)
        return lcl_0

    def lr_loop_CommaExps(_slot_0, prim__state, prim__tokens):
        lr_CommaExps_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_CommaExps(lr_CommaExps_reduce, prim__state, prim__tokens)
        lr_CommaExps_try = lcl_0
        lcl_0 = lr_CommaExps_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_CommaExps_try[1]
            lcl_0 = lcl_0
            lr_CommaExps_reduce = lcl_0
            lcl_0 = lr_step_CommaExps(lr_CommaExps_reduce, prim__state, prim__tokens)
            lr_CommaExps_try = lcl_0
            lcl_0 = lr_CommaExps_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_CommaExps_reduce

    def lr_step_CommaIds(_slot_0, prim__state, prim__tokens):
        lcl_0 = 11
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote , not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = (_slot_0, _slot_1)
            _slot_local__1 = lcl_0
            lcl_0 = parse_Id(prim__state, prim__tokens)
            _slot_2_check = lcl_0
            lcl_0 = _slot_2_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_2_check
            else:
                lcl_0 = _slot_2_check[1]
                lcl_0 = lcl_0
                _slot_2 = lcl_0
                lcl_0 = (_slot_local__1, _slot_2)
                lcl_0 = prim__mk__ast('CommaIds', lcl_0)
                _slot_local__2 = lcl_0
                lcl_0 = (True, _slot_local__2)
        return lcl_0

    def lr_loop_CommaIds(_slot_0, prim__state, prim__tokens):
        lr_CommaIds_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_CommaIds(lr_CommaIds_reduce, prim__state, prim__tokens)
        lr_CommaIds_try = lcl_0
        lcl_0 = lr_CommaIds_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_CommaIds_try[1]
            lcl_0 = lcl_0
            lr_CommaIds_reduce = lcl_0
            lcl_0 = lr_step_CommaIds(lr_CommaIds_reduce, prim__state, prim__tokens)
            lr_CommaIds_try = lcl_0
            lcl_0 = lr_CommaIds_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_CommaIds_reduce

    def lr_step_OrCase(_slot_0, prim__state, prim__tokens):
        lcl_0 = 27
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote | not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = (_slot_0, _slot_1)
            _slot_local__1 = lcl_0
            lcl_0 = parse_AndCaseRoot(prim__state, prim__tokens)
            _slot_2_check = lcl_0
            lcl_0 = _slot_2_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_2_check
            else:
                lcl_0 = _slot_2_check[1]
                lcl_0 = lcl_0
                _slot_2 = lcl_0
                lcl_0 = (_slot_local__1, _slot_2)
                lcl_0 = prim__mk__ast('OrCase', lcl_0)
                _slot_local__2 = lcl_0
                lcl_0 = (True, _slot_local__2)
        return lcl_0

    def lr_loop_OrCase(_slot_0, prim__state, prim__tokens):
        lr_OrCase_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_OrCase(lr_OrCase_reduce, prim__state, prim__tokens)
        lr_OrCase_try = lcl_0
        lcl_0 = lr_OrCase_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_OrCase_try[1]
            lcl_0 = lcl_0
            lr_OrCase_reduce = lcl_0
            lcl_0 = lr_step_OrCase(lr_OrCase_reduce, prim__state, prim__tokens)
            lr_OrCase_try = lcl_0
            lcl_0 = lr_OrCase_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_OrCase_reduce

    def lr_step_OrExpRoot(_slot_0, prim__state, prim__tokens):
        lcl_0 = 8
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote || not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = (_slot_0, _slot_1)
            _slot_local__1 = lcl_0
            lcl_0 = parse_AndExp(prim__state, prim__tokens)
            _slot_2_check = lcl_0
            lcl_0 = _slot_2_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_2_check
            else:
                lcl_0 = _slot_2_check[1]
                lcl_0 = lcl_0
                _slot_2 = lcl_0
                lcl_0 = (_slot_local__1, _slot_2)
                lcl_0 = prim__mk__ast('OrExpRoot', lcl_0)
                _slot_local__2 = lcl_0
                lcl_0 = (True, _slot_local__2)
        return lcl_0

    def lr_loop_OrExpRoot(_slot_0, prim__state, prim__tokens):
        lr_OrExpRoot_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_OrExpRoot(lr_OrExpRoot_reduce, prim__state, prim__tokens)
        lr_OrExpRoot_try = lcl_0
        lcl_0 = lr_OrExpRoot_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = lr_OrExpRoot_try[1]
            lcl_0 = lcl_0
            lr_OrExpRoot_reduce = lcl_0
            lcl_0 = lr_step_OrExpRoot(lr_OrExpRoot_reduce, prim__state, prim__tokens)
            lr_OrExpRoot_try = lcl_0
            lcl_0 = lr_OrExpRoot_try[0]
            lcl_0 = (lcl_0 is not False)
        prim__tokens.offset = _off_0
        return lr_OrExpRoot_reduce

    def parse_AndCase(prim__state, prim__tokens):
        lcl_0 = parse_AtomCase(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('AndCase', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = lr_loop_AndCase(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = (True, lcl_0)
        return lcl_0

    def parse_AndCaseRoot(prim__state, prim__tokens):
        lcl_0 = parse_AndCase(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            AndCaseRoot_a_0 = _slot_0
            lcl_0 = MKLRCommaList(AndCaseRoot_a_0)
            lcl_0 = MKAndCase(lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_AndExp(prim__state, prim__tokens):
        lcl_0 = parse_AndExpRoot(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            AndExp_it_0 = _slot_0
            lcl_0 = MKLRCommaList(AndExp_it_0)
            lcl_0 = And(lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_AndExpRoot(prim__state, prim__tokens):
        lcl_0 = parse_BinOp(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('AndExpRoot', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = lr_loop_AndExpRoot(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = (True, lcl_0)
        return lcl_0

    def parse_App(prim__state, prim__tokens):
        lcl_0 = parse_AtomExp(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            App_a_0 = _slot_0
            _slot_local__1 = App_a_0
            lcl_0 = lr_loop_App(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = (True, lcl_0)
        return lcl_0

    def parse_AtomCase(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 35):
                lcl_2 = parse_SymCase(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    AtomCase_a_1 = _slot_0
                    _slot_local__1 = AtomCase_a_1
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 32):
                lcl_2 = parse_StrCase(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    AtomCase_a_1 = _slot_0
                    _slot_local__1 = AtomCase_a_1
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 21):
                lcl_2 = parse_BoolCase(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    AtomCase_a_1 = _slot_0
                    _slot_local__1 = AtomCase_a_1
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 22):
                lcl_2 = parse_BoolCase(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    AtomCase_a_1 = _slot_0
                    _slot_local__1 = AtomCase_a_1
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 23):
                lcl_2 = parse_ListCase(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    AtomCase_a_1 = _slot_0
                    _slot_local__1 = AtomCase_a_1
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 16):
                lcl_2 = parse_NestCase(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    AtomCase_a_1 = _slot_0
                    _slot_local__1 = AtomCase_a_1
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 30):
                lcl_2 = parse_NumCase(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    AtomCase_a_1 = _slot_0
                    _slot_local__1 = AtomCase_a_1
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 36):
                lcl_2 = parse_Id(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    AtomCase_a_1 = _slot_0
                    _slot_local__1 = AtomCase_a_1
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 34):
                lcl_2 = parse_ChrCase(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    AtomCase_a_1 = _slot_0
                    _slot_local__1 = AtomCase_a_1
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'AtomCase lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'AtomCase got EOF')
            lcl_2 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_2
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_AtomExp(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 35):
                lcl_2 = parse_Nest(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    AtomExp_it_1 = _slot_0
                    _slot_local__1 = AtomExp_it_1
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 32):
                lcl_2 = parse_Nest(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    AtomExp_it_1 = _slot_0
                    _slot_local__1 = AtomExp_it_1
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 21):
                lcl_2 = parse_Nest(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    AtomExp_it_1 = _slot_0
                    _slot_local__1 = AtomExp_it_1
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 25):
                lcl_2 = parse_Match(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    AtomExp_it_1 = _slot_0
                    _slot_local__1 = AtomExp_it_1
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 18):
                lcl_2 = parse_Lam(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    AtomExp_it_1 = _slot_0
                    _slot_local__1 = AtomExp_it_1
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 22):
                lcl_2 = parse_Nest(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    AtomExp_it_1 = _slot_0
                    _slot_local__1 = AtomExp_it_1
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 23):
                lcl_2 = parse_Nest(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    AtomExp_it_1 = _slot_0
                    _slot_local__1 = AtomExp_it_1
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 16):
                lcl_2 = parse_Nest(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    AtomExp_it_1 = _slot_0
                    _slot_local__1 = AtomExp_it_1
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 30):
                lcl_2 = parse_Nest(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    AtomExp_it_1 = _slot_0
                    _slot_local__1 = AtomExp_it_1
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 36):
                lcl_2 = parse_Nest(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    AtomExp_it_1 = _slot_0
                    _slot_local__1 = AtomExp_it_1
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 34):
                lcl_2 = parse_Nest(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    AtomExp_it_1 = _slot_0
                    _slot_local__1 = AtomExp_it_1
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'AtomExp lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'AtomExp got EOF')
            lcl_2 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_2
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_BinOp(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 35):
                lcl_2 = parse_App(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    BinOp_it_1 = _slot_0
                    _slot_local__1 = BinOp_it_1
                    lcl_2 = lr_loop_BinOp(_slot_local__1, prim__state, prim__tokens)
                    lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            elif (lcl_2 == 32):
                lcl_2 = parse_App(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    BinOp_it_1 = _slot_0
                    _slot_local__1 = BinOp_it_1
                    lcl_2 = lr_loop_BinOp(_slot_local__1, prim__state, prim__tokens)
                    lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            elif (lcl_2 == 21):
                lcl_2 = parse_App(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    BinOp_it_1 = _slot_0
                    _slot_local__1 = BinOp_it_1
                    lcl_2 = lr_loop_BinOp(_slot_local__1, prim__state, prim__tokens)
                    lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            elif (lcl_2 == 25):
                lcl_2 = parse_App(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    BinOp_it_1 = _slot_0
                    _slot_local__1 = BinOp_it_1
                    lcl_2 = lr_loop_BinOp(_slot_local__1, prim__state, prim__tokens)
                    lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            elif (lcl_2 == 3):
                lcl_2 = parse_LetExp(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    BinOp_it_1 = _slot_0
                    _slot_local__1 = BinOp_it_1
                    lcl_2 = lr_loop_BinOp(_slot_local__1, prim__state, prim__tokens)
                    lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            elif (lcl_2 == 13):
                lcl_2 = parse_IfExp(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    BinOp_it_1 = _slot_0
                    _slot_local__1 = BinOp_it_1
                    lcl_2 = lr_loop_BinOp(_slot_local__1, prim__state, prim__tokens)
                    lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            elif (lcl_2 == 18):
                lcl_2 = parse_App(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    BinOp_it_1 = _slot_0
                    _slot_local__1 = BinOp_it_1
                    lcl_2 = lr_loop_BinOp(_slot_local__1, prim__state, prim__tokens)
                    lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            elif (lcl_2 == 22):
                lcl_2 = parse_App(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    BinOp_it_1 = _slot_0
                    _slot_local__1 = BinOp_it_1
                    lcl_2 = lr_loop_BinOp(_slot_local__1, prim__state, prim__tokens)
                    lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            elif (lcl_2 == 23):
                lcl_2 = parse_App(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    BinOp_it_1 = _slot_0
                    _slot_local__1 = BinOp_it_1
                    lcl_2 = lr_loop_BinOp(_slot_local__1, prim__state, prim__tokens)
                    lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            elif (lcl_2 == 16):
                lcl_2 = parse_App(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    BinOp_it_1 = _slot_0
                    _slot_local__1 = BinOp_it_1
                    lcl_2 = lr_loop_BinOp(_slot_local__1, prim__state, prim__tokens)
                    lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            elif (lcl_2 == 30):
                lcl_2 = parse_App(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    BinOp_it_1 = _slot_0
                    _slot_local__1 = BinOp_it_1
                    lcl_2 = lr_loop_BinOp(_slot_local__1, prim__state, prim__tokens)
                    lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            elif (lcl_2 == 36):
                lcl_2 = parse_App(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    BinOp_it_1 = _slot_0
                    _slot_local__1 = BinOp_it_1
                    lcl_2 = lr_loop_BinOp(_slot_local__1, prim__state, prim__tokens)
                    lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            elif (lcl_2 == 34):
                lcl_2 = parse_App(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    BinOp_it_1 = _slot_0
                    _slot_local__1 = BinOp_it_1
                    lcl_2 = lr_loop_BinOp(_slot_local__1, prim__state, prim__tokens)
                    lcl_2 = (True, lcl_2)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'BinOp lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'BinOp got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_BlockExp(prim__state, prim__tokens):
        lcl_0 = parse_OrExp(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('BlockExp', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = lr_loop_BlockExp(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = (True, lcl_0)
        return lcl_0

    def parse_BoolCase(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 21):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                BoolCase_a_1 = _slot_0
                lcl_2 = MKBool(BoolCase_a_1)
                lcl_2 = BoolCase(lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 22):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                BoolCase_a_1 = _slot_0
                lcl_2 = MKBool(BoolCase_a_1)
                lcl_2 = BoolCase(lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'BoolCase lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'BoolCase got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_BoolExpr(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 21):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                BoolExpr_a_1 = _slot_0
                lcl_2 = MKBool(BoolExpr_a_1)
                lcl_2 = BoolExpr(lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 22):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                BoolExpr_a_1 = _slot_0
                lcl_2 = MKBool(BoolExpr_a_1)
                lcl_2 = BoolExpr(lcl_2)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'BoolExpr lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'BoolExpr got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_Case(prim__state, prim__tokens):
        lcl_0 = parse_OrCase(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            Case_a_0 = _slot_0
            lcl_0 = MKLRCommaList(Case_a_0)
            lcl_0 = MKOrCase(lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_CaseExp(prim__state, prim__tokens):
        lcl_0 = 27
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote | not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_Case(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_1 = _slot_1_check[1]
                lcl_1 = lcl_1
                _slot_1 = lcl_1
                CaseExp_case_1 = _slot_1
                lcl_1 = prim__tokens.offset
                _off_1 = lcl_1
                lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_1:
                    lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_3 = lcl_3.idint
                    if (lcl_3 == 28):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_3 = _py_local_t
                        _slot_2 = lcl_3
                        lcl_3 = parse_Exp(prim__state, prim__tokens)
                        _slot_3_check = lcl_3
                        lcl_3 = _slot_3_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_3_check
                        else:
                            lcl_4 = _slot_3_check[1]
                            lcl_4 = lcl_4
                            _slot_3 = lcl_4
                            CaseExp_guard_2 = _slot_3
                            lcl_4 = 19
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_4):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_4 = _py_local_tk
                            _slot_4 = lcl_4
                            lcl_4 = (_slot_4 is None)
                            if lcl_4:
                                lcl_4 = prim__tokens.offset
                                lcl_4 = (lcl_4, 'quote -> not match')
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = lcl_4
                                lcl_4 = (False, lcl_4)
                            else:
                                lcl_4 = parse_Exp(prim__state, prim__tokens)
                                _slot_5_check = lcl_4
                                lcl_4 = _slot_5_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_5_check
                                else:
                                    lcl_5 = _slot_5_check[1]
                                    lcl_5 = lcl_5
                                    _slot_5 = lcl_5
                                    CaseExp_exp_3 = _slot_5
                                    lcl_5 = Tuple3(CaseExp_case_1, CaseExp_guard_2, CaseExp_exp_3)
                                    _slot_local__1 = lcl_5
                                    lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    elif (lcl_3 == 19):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_3 = _py_local_t
                        _slot_2 = lcl_3
                        lcl_4 = parse_Exp(prim__state, prim__tokens)
                        _slot_3_check = lcl_4
                        lcl_3 = _slot_3_check[0]
                        lcl_3 = (lcl_3 is False)
                        if lcl_3:
                            lcl_3 = _slot_3_check
                        else:
                            lcl_4 = _slot_3_check[1]
                            lcl_4 = lcl_4
                            _slot_3 = lcl_4
                            CaseExp_exp_2 = _slot_3
                            lcl_4 = Tuple3(CaseExp_case_1, none, CaseExp_exp_2)
                            _slot_local__1 = lcl_4
                            lcl_4 = (True, _slot_local__1)
                            lcl_3 = lcl_4
                        lcl_2 = lcl_3
                    else:
                        lcl_3 = (_off_1, 'CaseExp lookahead failed')
                        lcl_3 = prim__cons(lcl_3, prim__nil)
                        lcl_3 = lcl_3
                        lcl_3 = (False, lcl_3)
                        lcl_2 = lcl_3
                    lcl_1 = lcl_2
                else:
                    lcl_2 = (_off_1, 'CaseExp got EOF')
                    lcl_3 = prim__cons(lcl_2, prim__nil)
                    lcl_2 = lcl_3
                    lcl_2 = (False, lcl_2)
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
        return lcl_0

    def parse_CaseExps(prim__state, prim__tokens):
        lcl_0 = parse_CaseExp(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('CaseExps', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = lr_loop_CaseExps(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = (True, lcl_0)
        return lcl_0

    def parse_ChrCase(prim__state, prim__tokens):
        lcl_0 = 34
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'chr not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            ChrCase_s_1 = _slot_0
            lcl_0 = MKStr(ChrCase_s_1)
            lcl_0 = ChrCase(lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_ChrExpr(prim__state, prim__tokens):
        lcl_0 = 34
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'chr not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            ChrExpr_a_1 = _slot_0
            lcl_0 = MKStr(ChrExpr_a_1)
            lcl_0 = ChrExpr(lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_CommaCases(prim__state, prim__tokens):
        lcl_0 = parse_Case(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('CommaCases', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = lr_loop_CommaCases(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = (True, lcl_0)
        return lcl_0

    def parse_CommaExps(prim__state, prim__tokens):
        lcl_0 = parse_Exp(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('CommaExps', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = lr_loop_CommaExps(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = (True, lcl_0)
        return lcl_0

    def parse_CommaIds(prim__state, prim__tokens):
        lcl_0 = parse_Id(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('CommaIds', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = lr_loop_CommaIds(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = (True, lcl_0)
        return lcl_0

    def parse_Do(prim__state, prim__tokens):
        lcl_0 = 2
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote do not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_Exp(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_1 = _slot_1_check[1]
                lcl_1 = lcl_1
                _slot_1 = lcl_1
                Do_exp_1 = _slot_1
                lcl_1 = Do(Do_exp_1)
                _slot_local__1 = lcl_1
                lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
        return lcl_0

    def parse_Exp(prim__state, prim__tokens):
        lcl_0 = parse_BlockExp(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            Exp_it_0 = _slot_0
            lcl_0 = MKLRCommaList(Exp_it_0)
            lcl_0 = BlockExpr(lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_Id(prim__state, prim__tokens):
        lcl_0 = 36
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'identifier not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            Id_a_1 = _slot_0
            lcl_0 = MKIdent(Id_a_1)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_IfExp(prim__state, prim__tokens):
        lcl_0 = 13
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote if not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_Exp(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_1 = _slot_1_check[1]
                lcl_1 = lcl_1
                _slot_1 = lcl_1
                IfExp_cond_1 = _slot_1
                lcl_1 = 14
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_1):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_1 = _py_local_tk
                _slot_2 = lcl_1
                lcl_1 = (_slot_2 is None)
                if lcl_1:
                    lcl_1 = prim__tokens.offset
                    lcl_1 = (lcl_1, 'quote then not match')
                    lcl_1 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = lcl_1
                    lcl_1 = (False, lcl_1)
                else:
                    lcl_1 = parse_Exp(prim__state, prim__tokens)
                    _slot_3_check = lcl_1
                    lcl_1 = _slot_3_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_3_check
                    else:
                        lcl_2 = _slot_3_check[1]
                        lcl_2 = lcl_2
                        _slot_3 = lcl_2
                        IfExp_tC_2 = _slot_3
                        lcl_2 = 15
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_2):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_2 = _py_local_tk
                        _slot_4 = lcl_2
                        lcl_2 = (_slot_4 is None)
                        if lcl_2:
                            lcl_2 = prim__tokens.offset
                            lcl_2 = (lcl_2, 'quote else not match')
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_2
                            lcl_2 = (False, lcl_2)
                        else:
                            lcl_2 = parse_Exp(prim__state, prim__tokens)
                            _slot_5_check = lcl_2
                            lcl_2 = _slot_5_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_5_check
                            else:
                                lcl_3 = _slot_5_check[1]
                                lcl_3 = lcl_3
                                _slot_5 = lcl_3
                                IfExp_fC_3 = _slot_5
                                lcl_3 = IfExp(IfExp_cond_1, IfExp_tC_2, IfExp_fC_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                                lcl_2 = lcl_3
                        lcl_1 = lcl_2
                lcl_0 = lcl_1
        return lcl_0

    def parse_Lam(prim__state, prim__tokens):
        lcl_0 = 18
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote fn not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = prim__tokens.offset
            _off_1 = lcl_0
            lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_0:
                lcl_1 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_1 = lcl_1.idint
                if (lcl_1 == 16):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_1 = _py_local_t
                    _slot_1 = lcl_1
                    lcl_1 = prim__tokens.offset
                    _off_2 = lcl_1
                    lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_1:
                        lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_2 = lcl_2.idint
                        if (lcl_2 == 17):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_2 = _py_local_t
                            _slot_2 = lcl_2
                            lcl_2 = 19
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_2):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_2 = _py_local_tk
                            _slot_3 = lcl_2
                            lcl_2 = (_slot_3 is None)
                            if lcl_2:
                                lcl_3 = prim__tokens.offset
                                lcl_3 = (lcl_3, 'quote -> not match')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                                lcl_2 = lcl_3
                            else:
                                lcl_3 = parse_Exp(prim__state, prim__tokens)
                                _slot_4_check = lcl_3
                                lcl_3 = _slot_4_check[0]
                                lcl_3 = (lcl_3 is False)
                                if lcl_3:
                                    lcl_3 = _slot_4_check
                                else:
                                    lcl_4 = _slot_4_check[1]
                                    lcl_4 = lcl_4
                                    _slot_4 = lcl_4
                                    Lam_exp_4 = _slot_4
                                    lcl_4 = prim__tokens.offset
                                    _off_4 = lcl_4
                                    lcl_4 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                    if lcl_4:
                                        lcl_6 = prim__tokens.array[(prim__tokens.offset + 0)]
                                        lcl_6 = lcl_6.idint
                                        if (lcl_6 == 20):
                                            _py_local_i = prim__tokens.offset
                                            _py_local_t = prim__tokens.array[_py_local_i]
                                            prim__tokens.offset = (_py_local_i + 1)
                                            lcl_6 = _py_local_t
                                            _slot_5 = lcl_6
                                            lcl_6 = Lam(Tuple0, Lam_exp_4)
                                            _slot_local__1 = lcl_6
                                            lcl_6 = (True, _slot_local__1)
                                            lcl_5 = lcl_6
                                        else:
                                            lcl_6 = Lam(Tuple0, Lam_exp_4)
                                            _slot_local__1 = lcl_6
                                            lcl_6 = (True, _slot_local__1)
                                            lcl_5 = lcl_6
                                        lcl_4 = lcl_5
                                    else:
                                        lcl_5 = (_off_4, 'Lam got EOF')
                                        lcl_6 = prim__cons(lcl_5, prim__nil)
                                        lcl_5 = lcl_6
                                        lcl_5 = (False, lcl_5)
                                        lcl_4 = lcl_5
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                        elif (lcl_2 == 36):
                            lcl_2 = parse_CommaIds(prim__state, prim__tokens)
                            _slot_2_check = lcl_2
                            lcl_3 = _slot_2_check[0]
                            lcl_4 = (lcl_3 is False)
                            if lcl_4:
                                lcl_2 = _slot_2_check
                            else:
                                lcl_3 = _slot_2_check[1]
                                lcl_3 = lcl_3
                                _slot_2 = lcl_3
                                Lam_args_3 = _slot_2
                                lcl_3 = 17
                                try:
                                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                    if (_py_local_tk.idint is lcl_3):
                                        prim__tokens.offset += 1
                                    else:
                                        _py_local_tk = None
                                except IndexError:
                                    _py_local_tk = None
                                lcl_3 = _py_local_tk
                                _slot_3 = lcl_3
                                lcl_3 = (_slot_3 is None)
                                if lcl_3:
                                    lcl_3 = prim__tokens.offset
                                    lcl_3 = (lcl_3, 'quote ) not match')
                                    lcl_3 = prim__cons(lcl_3, prim__nil)
                                    lcl_3 = lcl_3
                                    lcl_3 = (False, lcl_3)
                                else:
                                    lcl_3 = 19
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_3):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_3 = _py_local_tk
                                    _slot_4 = lcl_3
                                    lcl_3 = (_slot_4 is None)
                                    if lcl_3:
                                        lcl_4 = prim__tokens.offset
                                        lcl_4 = (lcl_4, 'quote -> not match')
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = lcl_4
                                        lcl_4 = (False, lcl_4)
                                        lcl_3 = lcl_4
                                    else:
                                        lcl_4 = parse_Exp(prim__state, prim__tokens)
                                        _slot_5_check = lcl_4
                                        lcl_4 = _slot_5_check[0]
                                        lcl_4 = (lcl_4 is False)
                                        if lcl_4:
                                            lcl_4 = _slot_5_check
                                        else:
                                            lcl_5 = _slot_5_check[1]
                                            lcl_5 = lcl_5
                                            _slot_5 = lcl_5
                                            Lam_exp_5 = _slot_5
                                            lcl_5 = prim__tokens.offset
                                            _off_5 = lcl_5
                                            lcl_5 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                            if lcl_5:
                                                lcl_7 = prim__tokens.array[(prim__tokens.offset + 0)]
                                                lcl_7 = lcl_7.idint
                                                if (lcl_7 == 20):
                                                    _py_local_i = prim__tokens.offset
                                                    _py_local_t = prim__tokens.array[_py_local_i]
                                                    prim__tokens.offset = (_py_local_i + 1)
                                                    lcl_7 = _py_local_t
                                                    _slot_6 = lcl_7
                                                    lcl_7 = MKLRCommaList(Lam_args_3)
                                                    lcl_7 = Lam(lcl_7, Lam_exp_5)
                                                    _slot_local__1 = lcl_7
                                                    lcl_7 = (True, _slot_local__1)
                                                    lcl_6 = lcl_7
                                                else:
                                                    lcl_7 = MKLRCommaList(Lam_args_3)
                                                    lcl_7 = Lam(lcl_7, Lam_exp_5)
                                                    _slot_local__1 = lcl_7
                                                    lcl_7 = (True, _slot_local__1)
                                                    lcl_6 = lcl_7
                                                lcl_5 = lcl_6
                                            else:
                                                lcl_6 = (_off_5, 'Lam got EOF')
                                                lcl_7 = prim__cons(lcl_6, prim__nil)
                                                lcl_6 = lcl_7
                                                lcl_6 = (False, lcl_6)
                                                lcl_5 = lcl_6
                                            lcl_4 = lcl_5
                                        lcl_3 = lcl_4
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                        else:
                            lcl_2 = (_off_2, 'Lam lookahead failed')
                            lcl_3 = prim__cons(lcl_2, prim__nil)
                            lcl_4 = lcl_3
                            lcl_5 = (False, lcl_4)
                            lcl_1 = lcl_5
                    else:
                        lcl_1 = (_off_2, 'Lam got EOF')
                        lcl_1 = prim__cons(lcl_1, prim__nil)
                        lcl_1 = lcl_1
                        lcl_1 = (False, lcl_1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 36):
                    lcl_1 = parse_Id(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        Lam_arg_2 = _slot_1
                        lcl_2 = 19
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_2):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_2 = _py_local_tk
                        _slot_2 = lcl_2
                        lcl_2 = (_slot_2 is None)
                        if lcl_2:
                            lcl_2 = prim__tokens.offset
                            lcl_2 = (lcl_2, 'quote -> not match')
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_2
                            lcl_2 = (False, lcl_2)
                        else:
                            lcl_2 = parse_Exp(prim__state, prim__tokens)
                            _slot_3_check = lcl_2
                            lcl_2 = _slot_3_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_3_check
                            else:
                                lcl_3 = _slot_3_check[1]
                                lcl_3 = lcl_3
                                _slot_3 = lcl_3
                                Lam_exp_3 = _slot_3
                                lcl_3 = prim__tokens.offset
                                _off_3 = lcl_3
                                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                                if lcl_3:
                                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                                    lcl_5 = lcl_5.idint
                                    if (lcl_5 == 20):
                                        _py_local_i = prim__tokens.offset
                                        _py_local_t = prim__tokens.array[_py_local_i]
                                        prim__tokens.offset = (_py_local_i + 1)
                                        lcl_5 = _py_local_t
                                        _slot_4 = lcl_5
                                        lcl_5 = Tuple1(Lam_arg_2)
                                        lcl_5 = Lam(lcl_5, Lam_exp_3)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                        lcl_4 = lcl_5
                                    else:
                                        lcl_5 = Tuple1(Lam_arg_2)
                                        lcl_5 = Lam(lcl_5, Lam_exp_3)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                        lcl_4 = lcl_5
                                    lcl_3 = lcl_4
                                else:
                                    lcl_4 = (_off_3, 'Lam got EOF')
                                    lcl_5 = prim__cons(lcl_4, prim__nil)
                                    lcl_4 = lcl_5
                                    lcl_4 = (False, lcl_4)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                else:
                    lcl_1 = (_off_1, 'Lam lookahead failed')
                    lcl_2 = prim__cons(lcl_1, prim__nil)
                    lcl_3 = lcl_2
                    lcl_1 = (False, lcl_3)
                    lcl_0 = lcl_1
            else:
                lcl_0 = (_off_1, 'Lam got EOF')
                lcl_1 = prim__cons(lcl_0, prim__nil)
                lcl_0 = lcl_1
                lcl_0 = (False, lcl_0)
        return lcl_0

    def parse_Let(prim__state, prim__tokens):
        lcl_0 = 3
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote let not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = prim__tokens.offset
            _off_1 = lcl_0
            lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_0:
                lcl_1 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_1 = lcl_1.idint
                if (lcl_1 == 4):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_1 = _py_local_t
                    _slot_1 = lcl_1
                    lcl_1 = parse_Id(prim__state, prim__tokens)
                    _slot_2_check = lcl_1
                    lcl_1 = _slot_2_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_2_check
                    else:
                        lcl_2 = _slot_2_check[1]
                        lcl_2 = lcl_2
                        _slot_2 = lcl_2
                        Let_ident_2 = _slot_2
                        lcl_2 = 5
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_2):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_2 = _py_local_tk
                        _slot_3 = lcl_2
                        lcl_2 = (_slot_3 is None)
                        if lcl_2:
                            lcl_2 = prim__tokens.offset
                            lcl_2 = (lcl_2, 'quote = not match')
                            lcl_2 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_2
                            lcl_2 = (False, lcl_2)
                        else:
                            lcl_2 = parse_Exp(prim__state, prim__tokens)
                            _slot_4_check = lcl_2
                            lcl_2 = _slot_4_check[0]
                            lcl_2 = (lcl_2 is False)
                            if lcl_2:
                                lcl_2 = _slot_4_check
                            else:
                                lcl_3 = _slot_4_check[1]
                                lcl_3 = lcl_3
                                _slot_4 = lcl_3
                                Let_exp_3 = _slot_4
                                lcl_3 = Let(Let_ident_2, true, Let_exp_3)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                                lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 36):
                    lcl_1 = parse_Id(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_1 = (lcl_2 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        Let_ident_2 = _slot_1
                        lcl_1 = 5
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_1):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_1 = _py_local_tk
                        _slot_2 = lcl_1
                        lcl_1 = (_slot_2 is None)
                        if lcl_1:
                            lcl_1 = prim__tokens.offset
                            lcl_1 = (lcl_1, 'quote = not match')
                            lcl_1 = prim__cons(lcl_1, prim__nil)
                            lcl_1 = lcl_1
                            lcl_1 = (False, lcl_1)
                        else:
                            lcl_1 = parse_Exp(prim__state, prim__tokens)
                            _slot_3_check = lcl_1
                            lcl_1 = _slot_3_check[0]
                            lcl_1 = (lcl_1 is False)
                            if lcl_1:
                                lcl_1 = _slot_3_check
                            else:
                                lcl_2 = _slot_3_check[1]
                                lcl_2 = lcl_2
                                _slot_3 = lcl_2
                                Let_exp_3 = _slot_3
                                lcl_2 = Let(Let_ident_2, false, Let_exp_3)
                                _slot_local__1 = lcl_2
                                lcl_2 = (True, _slot_local__1)
                                lcl_1 = lcl_2
                    lcl_0 = lcl_1
                else:
                    lcl_1 = (_off_1, 'Let lookahead failed')
                    lcl_1 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = lcl_1
                    lcl_1 = (False, lcl_1)
                    lcl_0 = lcl_1
            else:
                lcl_0 = (_off_1, 'Let got EOF')
                lcl_1 = prim__cons(lcl_0, prim__nil)
                lcl_0 = lcl_1
                lcl_0 = (False, lcl_0)
        return lcl_0

    def parse_LetExp(prim__state, prim__tokens):
        lcl_0 = parse_Let(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            LetExp_let_0 = _slot_0
            lcl_0 = 12
            try:
                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                if (_py_local_tk.idint is lcl_0):
                    prim__tokens.offset += 1
                else:
                    _py_local_tk = None
            except IndexError:
                _py_local_tk = None
            lcl_0 = _py_local_tk
            _slot_1 = lcl_0
            lcl_0 = (_slot_1 is None)
            if lcl_0:
                lcl_0 = prim__tokens.offset
                lcl_0 = (lcl_0, 'quote in not match')
                lcl_0 = prim__cons(lcl_0, prim__nil)
                lcl_0 = lcl_0
                lcl_0 = (False, lcl_0)
            else:
                lcl_0 = parse_Exp(prim__state, prim__tokens)
                _slot_2_check = lcl_0
                lcl_0 = _slot_2_check[0]
                lcl_0 = (lcl_0 is False)
                if lcl_0:
                    lcl_0 = _slot_2_check
                else:
                    lcl_1 = _slot_2_check[1]
                    lcl_1 = lcl_1
                    _slot_2 = lcl_1
                    LetExp_exp_1 = _slot_2
                    lcl_1 = LetExp(LetExp_let_0, LetExp_exp_1)
                    _slot_local__1 = lcl_1
                    lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
        return lcl_0

    def parse_List(prim__state, prim__tokens):
        lcl_0 = 23
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote [ not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = prim__tokens.offset
            _off_1 = lcl_0
            lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_0:
                lcl_1 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_1 = lcl_1.idint
                if (lcl_1 == 35):
                    lcl_1 = parse_CommaExps(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        List_a_2 = _slot_1
                        lcl_1 = prim__tokens.offset
                        _off_2 = lcl_1
                        lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_1:
                            lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_3 = lcl_3.idint
                            if (lcl_3 == 24):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_3 = _py_local_t
                                _slot_2 = lcl_3
                                lcl_3 = MKLRCommaList(List_a_2)
                                lcl_3 = List(lcl_3, none)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                                lcl_2 = lcl_3
                            elif (lcl_3 == 33):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_3 = _py_local_t
                                _slot_2 = lcl_3
                                lcl_3 = parse_Exp(prim__state, prim__tokens)
                                _slot_3_check = lcl_3
                                lcl_3 = _slot_3_check[0]
                                lcl_3 = (lcl_3 is False)
                                if lcl_3:
                                    lcl_3 = _slot_3_check
                                else:
                                    lcl_4 = _slot_3_check[1]
                                    lcl_4 = lcl_4
                                    _slot_3 = lcl_4
                                    List_tl_3 = _slot_3
                                    lcl_4 = 24
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_4):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_4 = _py_local_tk
                                    _slot_4 = lcl_4
                                    lcl_4 = (_slot_4 is None)
                                    if lcl_4:
                                        lcl_4 = prim__tokens.offset
                                        lcl_4 = (lcl_4, 'quote ] not match')
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = lcl_4
                                        lcl_4 = (False, lcl_4)
                                    else:
                                        lcl_4 = MKLRCommaList(List_a_2)
                                        lcl_4 = List(lcl_4, List_tl_3)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                            else:
                                lcl_3 = (_off_2, 'List lookahead failed')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                        else:
                            lcl_2 = (_off_2, 'List got EOF')
                            lcl_3 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_3
                            lcl_2 = (False, lcl_2)
                            lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 32):
                    lcl_1 = parse_CommaExps(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        List_a_2 = _slot_1
                        lcl_2 = prim__tokens.offset
                        _off_2 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 24):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_4 = _py_local_t
                                _slot_2 = lcl_4
                                lcl_4 = MKLRCommaList(List_a_2)
                                lcl_4 = List(lcl_4, none)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            elif (lcl_4 == 33):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_4 = _py_local_t
                                _slot_2 = lcl_4
                                lcl_4 = parse_Exp(prim__state, prim__tokens)
                                _slot_3_check = lcl_4
                                lcl_4 = _slot_3_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_3_check
                                else:
                                    lcl_5 = _slot_3_check[1]
                                    lcl_5 = lcl_5
                                    _slot_3 = lcl_5
                                    List_tl_3 = _slot_3
                                    lcl_5 = 24
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_5):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_5 = _py_local_tk
                                    _slot_4 = lcl_5
                                    lcl_5 = (_slot_4 is None)
                                    if lcl_5:
                                        lcl_5 = prim__tokens.offset
                                        lcl_5 = (lcl_5, 'quote ] not match')
                                        lcl_5 = prim__cons(lcl_5, prim__nil)
                                        lcl_5 = lcl_5
                                        lcl_5 = (False, lcl_5)
                                    else:
                                        lcl_5 = MKLRCommaList(List_a_2)
                                        lcl_5 = List(lcl_5, List_tl_3)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_off_2, 'List lookahead failed')
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = lcl_4
                                lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_2, 'List got EOF')
                            lcl_4 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_4
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 21):
                    lcl_1 = parse_CommaExps(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_1 = (lcl_2 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        List_a_2 = _slot_1
                        lcl_1 = prim__tokens.offset
                        _off_2 = lcl_1
                        lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_1:
                            lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_3 = lcl_3.idint
                            if (lcl_3 == 24):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_3 = _py_local_t
                                _slot_2 = lcl_3
                                lcl_3 = MKLRCommaList(List_a_2)
                                lcl_3 = List(lcl_3, none)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                                lcl_2 = lcl_3
                            elif (lcl_3 == 33):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_3 = _py_local_t
                                _slot_2 = lcl_3
                                lcl_3 = parse_Exp(prim__state, prim__tokens)
                                _slot_3_check = lcl_3
                                lcl_3 = _slot_3_check[0]
                                lcl_3 = (lcl_3 is False)
                                if lcl_3:
                                    lcl_3 = _slot_3_check
                                else:
                                    lcl_4 = _slot_3_check[1]
                                    lcl_4 = lcl_4
                                    _slot_3 = lcl_4
                                    List_tl_3 = _slot_3
                                    lcl_4 = 24
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_4):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_4 = _py_local_tk
                                    _slot_4 = lcl_4
                                    lcl_4 = (_slot_4 is None)
                                    if lcl_4:
                                        lcl_4 = prim__tokens.offset
                                        lcl_4 = (lcl_4, 'quote ] not match')
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = lcl_4
                                        lcl_4 = (False, lcl_4)
                                    else:
                                        lcl_4 = MKLRCommaList(List_a_2)
                                        lcl_4 = List(lcl_4, List_tl_3)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                            else:
                                lcl_3 = (_off_2, 'List lookahead failed')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                        else:
                            lcl_2 = (_off_2, 'List got EOF')
                            lcl_3 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_3
                            lcl_2 = (False, lcl_2)
                            lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 25):
                    lcl_1 = parse_CommaExps(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        List_a_2 = _slot_1
                        lcl_2 = prim__tokens.offset
                        _off_2 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 24):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_4 = _py_local_t
                                _slot_2 = lcl_4
                                lcl_4 = MKLRCommaList(List_a_2)
                                lcl_4 = List(lcl_4, none)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            elif (lcl_4 == 33):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_4 = _py_local_t
                                _slot_2 = lcl_4
                                lcl_4 = parse_Exp(prim__state, prim__tokens)
                                _slot_3_check = lcl_4
                                lcl_4 = _slot_3_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_3_check
                                else:
                                    lcl_5 = _slot_3_check[1]
                                    lcl_5 = lcl_5
                                    _slot_3 = lcl_5
                                    List_tl_3 = _slot_3
                                    lcl_5 = 24
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_5):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_5 = _py_local_tk
                                    _slot_4 = lcl_5
                                    lcl_5 = (_slot_4 is None)
                                    if lcl_5:
                                        lcl_5 = prim__tokens.offset
                                        lcl_5 = (lcl_5, 'quote ] not match')
                                        lcl_5 = prim__cons(lcl_5, prim__nil)
                                        lcl_5 = lcl_5
                                        lcl_5 = (False, lcl_5)
                                    else:
                                        lcl_5 = MKLRCommaList(List_a_2)
                                        lcl_5 = List(lcl_5, List_tl_3)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_off_2, 'List lookahead failed')
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = lcl_4
                                lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_2, 'List got EOF')
                            lcl_4 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_4
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 3):
                    lcl_1 = parse_CommaExps(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_1 = (lcl_2 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        List_a_2 = _slot_1
                        lcl_1 = prim__tokens.offset
                        _off_2 = lcl_1
                        lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_1:
                            lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_3 = lcl_3.idint
                            if (lcl_3 == 24):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_3 = _py_local_t
                                _slot_2 = lcl_3
                                lcl_3 = MKLRCommaList(List_a_2)
                                lcl_3 = List(lcl_3, none)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                                lcl_2 = lcl_3
                            elif (lcl_3 == 33):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_3 = _py_local_t
                                _slot_2 = lcl_3
                                lcl_3 = parse_Exp(prim__state, prim__tokens)
                                _slot_3_check = lcl_3
                                lcl_3 = _slot_3_check[0]
                                lcl_3 = (lcl_3 is False)
                                if lcl_3:
                                    lcl_3 = _slot_3_check
                                else:
                                    lcl_4 = _slot_3_check[1]
                                    lcl_4 = lcl_4
                                    _slot_3 = lcl_4
                                    List_tl_3 = _slot_3
                                    lcl_4 = 24
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_4):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_4 = _py_local_tk
                                    _slot_4 = lcl_4
                                    lcl_4 = (_slot_4 is None)
                                    if lcl_4:
                                        lcl_4 = prim__tokens.offset
                                        lcl_4 = (lcl_4, 'quote ] not match')
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = lcl_4
                                        lcl_4 = (False, lcl_4)
                                    else:
                                        lcl_4 = MKLRCommaList(List_a_2)
                                        lcl_4 = List(lcl_4, List_tl_3)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                            else:
                                lcl_3 = (_off_2, 'List lookahead failed')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                        else:
                            lcl_2 = (_off_2, 'List got EOF')
                            lcl_3 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_3
                            lcl_2 = (False, lcl_2)
                            lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 13):
                    lcl_1 = parse_CommaExps(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        List_a_2 = _slot_1
                        lcl_2 = prim__tokens.offset
                        _off_2 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 24):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_4 = _py_local_t
                                _slot_2 = lcl_4
                                lcl_4 = MKLRCommaList(List_a_2)
                                lcl_4 = List(lcl_4, none)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            elif (lcl_4 == 33):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_4 = _py_local_t
                                _slot_2 = lcl_4
                                lcl_4 = parse_Exp(prim__state, prim__tokens)
                                _slot_3_check = lcl_4
                                lcl_4 = _slot_3_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_3_check
                                else:
                                    lcl_5 = _slot_3_check[1]
                                    lcl_5 = lcl_5
                                    _slot_3 = lcl_5
                                    List_tl_3 = _slot_3
                                    lcl_5 = 24
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_5):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_5 = _py_local_tk
                                    _slot_4 = lcl_5
                                    lcl_5 = (_slot_4 is None)
                                    if lcl_5:
                                        lcl_5 = prim__tokens.offset
                                        lcl_5 = (lcl_5, 'quote ] not match')
                                        lcl_5 = prim__cons(lcl_5, prim__nil)
                                        lcl_5 = lcl_5
                                        lcl_5 = (False, lcl_5)
                                    else:
                                        lcl_5 = MKLRCommaList(List_a_2)
                                        lcl_5 = List(lcl_5, List_tl_3)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_off_2, 'List lookahead failed')
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = lcl_4
                                lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_2, 'List got EOF')
                            lcl_4 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_4
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 18):
                    lcl_1 = parse_CommaExps(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_1 = (lcl_2 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        List_a_2 = _slot_1
                        lcl_1 = prim__tokens.offset
                        _off_2 = lcl_1
                        lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_1:
                            lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_3 = lcl_3.idint
                            if (lcl_3 == 24):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_3 = _py_local_t
                                _slot_2 = lcl_3
                                lcl_3 = MKLRCommaList(List_a_2)
                                lcl_3 = List(lcl_3, none)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                                lcl_2 = lcl_3
                            elif (lcl_3 == 33):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_3 = _py_local_t
                                _slot_2 = lcl_3
                                lcl_3 = parse_Exp(prim__state, prim__tokens)
                                _slot_3_check = lcl_3
                                lcl_3 = _slot_3_check[0]
                                lcl_3 = (lcl_3 is False)
                                if lcl_3:
                                    lcl_3 = _slot_3_check
                                else:
                                    lcl_4 = _slot_3_check[1]
                                    lcl_4 = lcl_4
                                    _slot_3 = lcl_4
                                    List_tl_3 = _slot_3
                                    lcl_4 = 24
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_4):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_4 = _py_local_tk
                                    _slot_4 = lcl_4
                                    lcl_4 = (_slot_4 is None)
                                    if lcl_4:
                                        lcl_4 = prim__tokens.offset
                                        lcl_4 = (lcl_4, 'quote ] not match')
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = lcl_4
                                        lcl_4 = (False, lcl_4)
                                    else:
                                        lcl_4 = MKLRCommaList(List_a_2)
                                        lcl_4 = List(lcl_4, List_tl_3)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                            else:
                                lcl_3 = (_off_2, 'List lookahead failed')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                        else:
                            lcl_2 = (_off_2, 'List got EOF')
                            lcl_3 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_3
                            lcl_2 = (False, lcl_2)
                            lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 22):
                    lcl_1 = parse_CommaExps(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        List_a_2 = _slot_1
                        lcl_2 = prim__tokens.offset
                        _off_2 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 24):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_4 = _py_local_t
                                _slot_2 = lcl_4
                                lcl_4 = MKLRCommaList(List_a_2)
                                lcl_4 = List(lcl_4, none)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            elif (lcl_4 == 33):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_4 = _py_local_t
                                _slot_2 = lcl_4
                                lcl_4 = parse_Exp(prim__state, prim__tokens)
                                _slot_3_check = lcl_4
                                lcl_4 = _slot_3_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_3_check
                                else:
                                    lcl_5 = _slot_3_check[1]
                                    lcl_5 = lcl_5
                                    _slot_3 = lcl_5
                                    List_tl_3 = _slot_3
                                    lcl_5 = 24
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_5):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_5 = _py_local_tk
                                    _slot_4 = lcl_5
                                    lcl_5 = (_slot_4 is None)
                                    if lcl_5:
                                        lcl_5 = prim__tokens.offset
                                        lcl_5 = (lcl_5, 'quote ] not match')
                                        lcl_5 = prim__cons(lcl_5, prim__nil)
                                        lcl_5 = lcl_5
                                        lcl_5 = (False, lcl_5)
                                    else:
                                        lcl_5 = MKLRCommaList(List_a_2)
                                        lcl_5 = List(lcl_5, List_tl_3)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_off_2, 'List lookahead failed')
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = lcl_4
                                lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_2, 'List got EOF')
                            lcl_4 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_4
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 24):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_1 = _py_local_t
                    _slot_1 = lcl_1
                    lcl_2 = List(Tuple0, none)
                    _slot_local__1 = lcl_2
                    lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 23):
                    lcl_1 = parse_CommaExps(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        List_a_2 = _slot_1
                        lcl_2 = prim__tokens.offset
                        _off_2 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 24):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_4 = _py_local_t
                                _slot_2 = lcl_4
                                lcl_4 = MKLRCommaList(List_a_2)
                                lcl_4 = List(lcl_4, none)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            elif (lcl_4 == 33):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_4 = _py_local_t
                                _slot_2 = lcl_4
                                lcl_4 = parse_Exp(prim__state, prim__tokens)
                                _slot_3_check = lcl_4
                                lcl_4 = _slot_3_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_3_check
                                else:
                                    lcl_5 = _slot_3_check[1]
                                    lcl_5 = lcl_5
                                    _slot_3 = lcl_5
                                    List_tl_3 = _slot_3
                                    lcl_5 = 24
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_5):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_5 = _py_local_tk
                                    _slot_4 = lcl_5
                                    lcl_5 = (_slot_4 is None)
                                    if lcl_5:
                                        lcl_5 = prim__tokens.offset
                                        lcl_5 = (lcl_5, 'quote ] not match')
                                        lcl_5 = prim__cons(lcl_5, prim__nil)
                                        lcl_5 = lcl_5
                                        lcl_5 = (False, lcl_5)
                                    else:
                                        lcl_5 = MKLRCommaList(List_a_2)
                                        lcl_5 = List(lcl_5, List_tl_3)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_off_2, 'List lookahead failed')
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = lcl_4
                                lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_2, 'List got EOF')
                            lcl_4 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_4
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 16):
                    lcl_1 = parse_CommaExps(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_1 = (lcl_2 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        List_a_2 = _slot_1
                        lcl_1 = prim__tokens.offset
                        _off_2 = lcl_1
                        lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_1:
                            lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_3 = lcl_3.idint
                            if (lcl_3 == 24):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_3 = _py_local_t
                                _slot_2 = lcl_3
                                lcl_3 = MKLRCommaList(List_a_2)
                                lcl_3 = List(lcl_3, none)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                                lcl_2 = lcl_3
                            elif (lcl_3 == 33):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_3 = _py_local_t
                                _slot_2 = lcl_3
                                lcl_3 = parse_Exp(prim__state, prim__tokens)
                                _slot_3_check = lcl_3
                                lcl_3 = _slot_3_check[0]
                                lcl_3 = (lcl_3 is False)
                                if lcl_3:
                                    lcl_3 = _slot_3_check
                                else:
                                    lcl_4 = _slot_3_check[1]
                                    lcl_4 = lcl_4
                                    _slot_3 = lcl_4
                                    List_tl_3 = _slot_3
                                    lcl_4 = 24
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_4):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_4 = _py_local_tk
                                    _slot_4 = lcl_4
                                    lcl_4 = (_slot_4 is None)
                                    if lcl_4:
                                        lcl_4 = prim__tokens.offset
                                        lcl_4 = (lcl_4, 'quote ] not match')
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = lcl_4
                                        lcl_4 = (False, lcl_4)
                                    else:
                                        lcl_4 = MKLRCommaList(List_a_2)
                                        lcl_4 = List(lcl_4, List_tl_3)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                            else:
                                lcl_3 = (_off_2, 'List lookahead failed')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                        else:
                            lcl_2 = (_off_2, 'List got EOF')
                            lcl_3 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_3
                            lcl_2 = (False, lcl_2)
                            lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 30):
                    lcl_1 = parse_CommaExps(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        List_a_2 = _slot_1
                        lcl_2 = prim__tokens.offset
                        _off_2 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 24):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_4 = _py_local_t
                                _slot_2 = lcl_4
                                lcl_4 = MKLRCommaList(List_a_2)
                                lcl_4 = List(lcl_4, none)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            elif (lcl_4 == 33):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_4 = _py_local_t
                                _slot_2 = lcl_4
                                lcl_4 = parse_Exp(prim__state, prim__tokens)
                                _slot_3_check = lcl_4
                                lcl_4 = _slot_3_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_3_check
                                else:
                                    lcl_5 = _slot_3_check[1]
                                    lcl_5 = lcl_5
                                    _slot_3 = lcl_5
                                    List_tl_3 = _slot_3
                                    lcl_5 = 24
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_5):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_5 = _py_local_tk
                                    _slot_4 = lcl_5
                                    lcl_5 = (_slot_4 is None)
                                    if lcl_5:
                                        lcl_5 = prim__tokens.offset
                                        lcl_5 = (lcl_5, 'quote ] not match')
                                        lcl_5 = prim__cons(lcl_5, prim__nil)
                                        lcl_5 = lcl_5
                                        lcl_5 = (False, lcl_5)
                                    else:
                                        lcl_5 = MKLRCommaList(List_a_2)
                                        lcl_5 = List(lcl_5, List_tl_3)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_off_2, 'List lookahead failed')
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = lcl_4
                                lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_2, 'List got EOF')
                            lcl_4 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_4
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 36):
                    lcl_1 = parse_CommaExps(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_1 = (lcl_2 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        List_a_2 = _slot_1
                        lcl_1 = prim__tokens.offset
                        _off_2 = lcl_1
                        lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_1:
                            lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_3 = lcl_3.idint
                            if (lcl_3 == 24):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_3 = _py_local_t
                                _slot_2 = lcl_3
                                lcl_3 = MKLRCommaList(List_a_2)
                                lcl_3 = List(lcl_3, none)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                                lcl_2 = lcl_3
                            elif (lcl_3 == 33):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_3 = _py_local_t
                                _slot_2 = lcl_3
                                lcl_3 = parse_Exp(prim__state, prim__tokens)
                                _slot_3_check = lcl_3
                                lcl_3 = _slot_3_check[0]
                                lcl_3 = (lcl_3 is False)
                                if lcl_3:
                                    lcl_3 = _slot_3_check
                                else:
                                    lcl_4 = _slot_3_check[1]
                                    lcl_4 = lcl_4
                                    _slot_3 = lcl_4
                                    List_tl_3 = _slot_3
                                    lcl_4 = 24
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_4):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_4 = _py_local_tk
                                    _slot_4 = lcl_4
                                    lcl_4 = (_slot_4 is None)
                                    if lcl_4:
                                        lcl_4 = prim__tokens.offset
                                        lcl_4 = (lcl_4, 'quote ] not match')
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = lcl_4
                                        lcl_4 = (False, lcl_4)
                                    else:
                                        lcl_4 = MKLRCommaList(List_a_2)
                                        lcl_4 = List(lcl_4, List_tl_3)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                            else:
                                lcl_3 = (_off_2, 'List lookahead failed')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                        else:
                            lcl_2 = (_off_2, 'List got EOF')
                            lcl_3 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_3
                            lcl_2 = (False, lcl_2)
                            lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 34):
                    lcl_1 = parse_CommaExps(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        List_a_2 = _slot_1
                        lcl_2 = prim__tokens.offset
                        _off_2 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 24):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_4 = _py_local_t
                                _slot_2 = lcl_4
                                lcl_4 = MKLRCommaList(List_a_2)
                                lcl_4 = List(lcl_4, none)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            elif (lcl_4 == 33):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_4 = _py_local_t
                                _slot_2 = lcl_4
                                lcl_4 = parse_Exp(prim__state, prim__tokens)
                                _slot_3_check = lcl_4
                                lcl_4 = _slot_3_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_3_check
                                else:
                                    lcl_5 = _slot_3_check[1]
                                    lcl_5 = lcl_5
                                    _slot_3 = lcl_5
                                    List_tl_3 = _slot_3
                                    lcl_5 = 24
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_5):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_5 = _py_local_tk
                                    _slot_4 = lcl_5
                                    lcl_5 = (_slot_4 is None)
                                    if lcl_5:
                                        lcl_5 = prim__tokens.offset
                                        lcl_5 = (lcl_5, 'quote ] not match')
                                        lcl_5 = prim__cons(lcl_5, prim__nil)
                                        lcl_5 = lcl_5
                                        lcl_5 = (False, lcl_5)
                                    else:
                                        lcl_5 = MKLRCommaList(List_a_2)
                                        lcl_5 = List(lcl_5, List_tl_3)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_off_2, 'List lookahead failed')
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = lcl_4
                                lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_2, 'List got EOF')
                            lcl_4 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_4
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                else:
                    lcl_1 = (_off_1, 'List lookahead failed')
                    lcl_2 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = lcl_2
                    lcl_1 = (False, lcl_1)
                    lcl_0 = lcl_1
            else:
                lcl_0 = (_off_1, 'List got EOF')
                lcl_0 = prim__cons(lcl_0, prim__nil)
                lcl_0 = lcl_0
                lcl_0 = (False, lcl_0)
        return lcl_0

    def parse_ListCase(prim__state, prim__tokens):
        lcl_0 = 23
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote [ not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = prim__tokens.offset
            _off_1 = lcl_0
            lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_0:
                lcl_1 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_1 = lcl_1.idint
                if (lcl_1 == 35):
                    lcl_1 = parse_CommaCases(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        ListCase_a_2 = _slot_1
                        lcl_1 = prim__tokens.offset
                        _off_2 = lcl_1
                        lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_1:
                            lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_3 = lcl_3.idint
                            if (lcl_3 == 24):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_3 = _py_local_t
                                _slot_2 = lcl_3
                                lcl_3 = MKLRCommaList(ListCase_a_2)
                                lcl_3 = ListCase(lcl_3, none)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                                lcl_2 = lcl_3
                            elif (lcl_3 == 33):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_3 = _py_local_t
                                _slot_2 = lcl_3
                                lcl_3 = parse_Case(prim__state, prim__tokens)
                                _slot_3_check = lcl_3
                                lcl_3 = _slot_3_check[0]
                                lcl_3 = (lcl_3 is False)
                                if lcl_3:
                                    lcl_3 = _slot_3_check
                                else:
                                    lcl_4 = _slot_3_check[1]
                                    lcl_4 = lcl_4
                                    _slot_3 = lcl_4
                                    ListCase_tl_3 = _slot_3
                                    lcl_4 = 24
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_4):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_4 = _py_local_tk
                                    _slot_4 = lcl_4
                                    lcl_4 = (_slot_4 is None)
                                    if lcl_4:
                                        lcl_4 = prim__tokens.offset
                                        lcl_4 = (lcl_4, 'quote ] not match')
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = lcl_4
                                        lcl_4 = (False, lcl_4)
                                    else:
                                        lcl_4 = MKLRCommaList(ListCase_a_2)
                                        lcl_4 = ListCase(lcl_4, ListCase_tl_3)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                            else:
                                lcl_3 = (_off_2, 'ListCase lookahead failed')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                        else:
                            lcl_2 = (_off_2, 'ListCase got EOF')
                            lcl_3 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_3
                            lcl_2 = (False, lcl_2)
                            lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 32):
                    lcl_1 = parse_CommaCases(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        ListCase_a_2 = _slot_1
                        lcl_2 = prim__tokens.offset
                        _off_2 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 24):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_4 = _py_local_t
                                _slot_2 = lcl_4
                                lcl_4 = MKLRCommaList(ListCase_a_2)
                                lcl_4 = ListCase(lcl_4, none)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            elif (lcl_4 == 33):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_4 = _py_local_t
                                _slot_2 = lcl_4
                                lcl_4 = parse_Case(prim__state, prim__tokens)
                                _slot_3_check = lcl_4
                                lcl_4 = _slot_3_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_3_check
                                else:
                                    lcl_5 = _slot_3_check[1]
                                    lcl_5 = lcl_5
                                    _slot_3 = lcl_5
                                    ListCase_tl_3 = _slot_3
                                    lcl_5 = 24
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_5):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_5 = _py_local_tk
                                    _slot_4 = lcl_5
                                    lcl_5 = (_slot_4 is None)
                                    if lcl_5:
                                        lcl_5 = prim__tokens.offset
                                        lcl_5 = (lcl_5, 'quote ] not match')
                                        lcl_5 = prim__cons(lcl_5, prim__nil)
                                        lcl_5 = lcl_5
                                        lcl_5 = (False, lcl_5)
                                    else:
                                        lcl_5 = MKLRCommaList(ListCase_a_2)
                                        lcl_5 = ListCase(lcl_5, ListCase_tl_3)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_off_2, 'ListCase lookahead failed')
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = lcl_4
                                lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_2, 'ListCase got EOF')
                            lcl_4 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_4
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 21):
                    lcl_1 = parse_CommaCases(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_1 = (lcl_2 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        ListCase_a_2 = _slot_1
                        lcl_1 = prim__tokens.offset
                        _off_2 = lcl_1
                        lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_1:
                            lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_3 = lcl_3.idint
                            if (lcl_3 == 24):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_3 = _py_local_t
                                _slot_2 = lcl_3
                                lcl_3 = MKLRCommaList(ListCase_a_2)
                                lcl_3 = ListCase(lcl_3, none)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                                lcl_2 = lcl_3
                            elif (lcl_3 == 33):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_3 = _py_local_t
                                _slot_2 = lcl_3
                                lcl_3 = parse_Case(prim__state, prim__tokens)
                                _slot_3_check = lcl_3
                                lcl_3 = _slot_3_check[0]
                                lcl_3 = (lcl_3 is False)
                                if lcl_3:
                                    lcl_3 = _slot_3_check
                                else:
                                    lcl_4 = _slot_3_check[1]
                                    lcl_4 = lcl_4
                                    _slot_3 = lcl_4
                                    ListCase_tl_3 = _slot_3
                                    lcl_4 = 24
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_4):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_4 = _py_local_tk
                                    _slot_4 = lcl_4
                                    lcl_4 = (_slot_4 is None)
                                    if lcl_4:
                                        lcl_4 = prim__tokens.offset
                                        lcl_4 = (lcl_4, 'quote ] not match')
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = lcl_4
                                        lcl_4 = (False, lcl_4)
                                    else:
                                        lcl_4 = MKLRCommaList(ListCase_a_2)
                                        lcl_4 = ListCase(lcl_4, ListCase_tl_3)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                            else:
                                lcl_3 = (_off_2, 'ListCase lookahead failed')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                        else:
                            lcl_2 = (_off_2, 'ListCase got EOF')
                            lcl_3 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_3
                            lcl_2 = (False, lcl_2)
                            lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 22):
                    lcl_1 = parse_CommaCases(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        ListCase_a_2 = _slot_1
                        lcl_2 = prim__tokens.offset
                        _off_2 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 24):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_4 = _py_local_t
                                _slot_2 = lcl_4
                                lcl_4 = MKLRCommaList(ListCase_a_2)
                                lcl_4 = ListCase(lcl_4, none)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            elif (lcl_4 == 33):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_4 = _py_local_t
                                _slot_2 = lcl_4
                                lcl_4 = parse_Case(prim__state, prim__tokens)
                                _slot_3_check = lcl_4
                                lcl_4 = _slot_3_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_3_check
                                else:
                                    lcl_5 = _slot_3_check[1]
                                    lcl_5 = lcl_5
                                    _slot_3 = lcl_5
                                    ListCase_tl_3 = _slot_3
                                    lcl_5 = 24
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_5):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_5 = _py_local_tk
                                    _slot_4 = lcl_5
                                    lcl_5 = (_slot_4 is None)
                                    if lcl_5:
                                        lcl_5 = prim__tokens.offset
                                        lcl_5 = (lcl_5, 'quote ] not match')
                                        lcl_5 = prim__cons(lcl_5, prim__nil)
                                        lcl_5 = lcl_5
                                        lcl_5 = (False, lcl_5)
                                    else:
                                        lcl_5 = MKLRCommaList(ListCase_a_2)
                                        lcl_5 = ListCase(lcl_5, ListCase_tl_3)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_off_2, 'ListCase lookahead failed')
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = lcl_4
                                lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_2, 'ListCase got EOF')
                            lcl_4 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_4
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 24):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_1 = _py_local_t
                    _slot_1 = lcl_1
                    lcl_2 = ListCase(Tuple0, none)
                    _slot_local__1 = lcl_2
                    lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 23):
                    lcl_1 = parse_CommaCases(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        ListCase_a_2 = _slot_1
                        lcl_2 = prim__tokens.offset
                        _off_2 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 24):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_4 = _py_local_t
                                _slot_2 = lcl_4
                                lcl_4 = MKLRCommaList(ListCase_a_2)
                                lcl_4 = ListCase(lcl_4, none)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            elif (lcl_4 == 33):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_4 = _py_local_t
                                _slot_2 = lcl_4
                                lcl_4 = parse_Case(prim__state, prim__tokens)
                                _slot_3_check = lcl_4
                                lcl_4 = _slot_3_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_3_check
                                else:
                                    lcl_5 = _slot_3_check[1]
                                    lcl_5 = lcl_5
                                    _slot_3 = lcl_5
                                    ListCase_tl_3 = _slot_3
                                    lcl_5 = 24
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_5):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_5 = _py_local_tk
                                    _slot_4 = lcl_5
                                    lcl_5 = (_slot_4 is None)
                                    if lcl_5:
                                        lcl_5 = prim__tokens.offset
                                        lcl_5 = (lcl_5, 'quote ] not match')
                                        lcl_5 = prim__cons(lcl_5, prim__nil)
                                        lcl_5 = lcl_5
                                        lcl_5 = (False, lcl_5)
                                    else:
                                        lcl_5 = MKLRCommaList(ListCase_a_2)
                                        lcl_5 = ListCase(lcl_5, ListCase_tl_3)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_off_2, 'ListCase lookahead failed')
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = lcl_4
                                lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_2, 'ListCase got EOF')
                            lcl_4 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_4
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 16):
                    lcl_1 = parse_CommaCases(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_1 = (lcl_2 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        ListCase_a_2 = _slot_1
                        lcl_1 = prim__tokens.offset
                        _off_2 = lcl_1
                        lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_1:
                            lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_3 = lcl_3.idint
                            if (lcl_3 == 24):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_3 = _py_local_t
                                _slot_2 = lcl_3
                                lcl_3 = MKLRCommaList(ListCase_a_2)
                                lcl_3 = ListCase(lcl_3, none)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                                lcl_2 = lcl_3
                            elif (lcl_3 == 33):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_3 = _py_local_t
                                _slot_2 = lcl_3
                                lcl_3 = parse_Case(prim__state, prim__tokens)
                                _slot_3_check = lcl_3
                                lcl_3 = _slot_3_check[0]
                                lcl_3 = (lcl_3 is False)
                                if lcl_3:
                                    lcl_3 = _slot_3_check
                                else:
                                    lcl_4 = _slot_3_check[1]
                                    lcl_4 = lcl_4
                                    _slot_3 = lcl_4
                                    ListCase_tl_3 = _slot_3
                                    lcl_4 = 24
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_4):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_4 = _py_local_tk
                                    _slot_4 = lcl_4
                                    lcl_4 = (_slot_4 is None)
                                    if lcl_4:
                                        lcl_4 = prim__tokens.offset
                                        lcl_4 = (lcl_4, 'quote ] not match')
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = lcl_4
                                        lcl_4 = (False, lcl_4)
                                    else:
                                        lcl_4 = MKLRCommaList(ListCase_a_2)
                                        lcl_4 = ListCase(lcl_4, ListCase_tl_3)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                            else:
                                lcl_3 = (_off_2, 'ListCase lookahead failed')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                        else:
                            lcl_2 = (_off_2, 'ListCase got EOF')
                            lcl_3 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_3
                            lcl_2 = (False, lcl_2)
                            lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 30):
                    lcl_1 = parse_CommaCases(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        ListCase_a_2 = _slot_1
                        lcl_2 = prim__tokens.offset
                        _off_2 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 24):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_4 = _py_local_t
                                _slot_2 = lcl_4
                                lcl_4 = MKLRCommaList(ListCase_a_2)
                                lcl_4 = ListCase(lcl_4, none)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            elif (lcl_4 == 33):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_4 = _py_local_t
                                _slot_2 = lcl_4
                                lcl_4 = parse_Case(prim__state, prim__tokens)
                                _slot_3_check = lcl_4
                                lcl_4 = _slot_3_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_3_check
                                else:
                                    lcl_5 = _slot_3_check[1]
                                    lcl_5 = lcl_5
                                    _slot_3 = lcl_5
                                    ListCase_tl_3 = _slot_3
                                    lcl_5 = 24
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_5):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_5 = _py_local_tk
                                    _slot_4 = lcl_5
                                    lcl_5 = (_slot_4 is None)
                                    if lcl_5:
                                        lcl_5 = prim__tokens.offset
                                        lcl_5 = (lcl_5, 'quote ] not match')
                                        lcl_5 = prim__cons(lcl_5, prim__nil)
                                        lcl_5 = lcl_5
                                        lcl_5 = (False, lcl_5)
                                    else:
                                        lcl_5 = MKLRCommaList(ListCase_a_2)
                                        lcl_5 = ListCase(lcl_5, ListCase_tl_3)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_off_2, 'ListCase lookahead failed')
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = lcl_4
                                lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_2, 'ListCase got EOF')
                            lcl_4 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_4
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 36):
                    lcl_1 = parse_CommaCases(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_2 = _slot_1_check[0]
                    lcl_1 = (lcl_2 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        ListCase_a_2 = _slot_1
                        lcl_1 = prim__tokens.offset
                        _off_2 = lcl_1
                        lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_1:
                            lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_3 = lcl_3.idint
                            if (lcl_3 == 24):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_3 = _py_local_t
                                _slot_2 = lcl_3
                                lcl_3 = MKLRCommaList(ListCase_a_2)
                                lcl_3 = ListCase(lcl_3, none)
                                _slot_local__1 = lcl_3
                                lcl_3 = (True, _slot_local__1)
                                lcl_2 = lcl_3
                            elif (lcl_3 == 33):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_3 = _py_local_t
                                _slot_2 = lcl_3
                                lcl_3 = parse_Case(prim__state, prim__tokens)
                                _slot_3_check = lcl_3
                                lcl_3 = _slot_3_check[0]
                                lcl_3 = (lcl_3 is False)
                                if lcl_3:
                                    lcl_3 = _slot_3_check
                                else:
                                    lcl_4 = _slot_3_check[1]
                                    lcl_4 = lcl_4
                                    _slot_3 = lcl_4
                                    ListCase_tl_3 = _slot_3
                                    lcl_4 = 24
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_4):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_4 = _py_local_tk
                                    _slot_4 = lcl_4
                                    lcl_4 = (_slot_4 is None)
                                    if lcl_4:
                                        lcl_4 = prim__tokens.offset
                                        lcl_4 = (lcl_4, 'quote ] not match')
                                        lcl_4 = prim__cons(lcl_4, prim__nil)
                                        lcl_4 = lcl_4
                                        lcl_4 = (False, lcl_4)
                                    else:
                                        lcl_4 = MKLRCommaList(ListCase_a_2)
                                        lcl_4 = ListCase(lcl_4, ListCase_tl_3)
                                        _slot_local__1 = lcl_4
                                        lcl_4 = (True, _slot_local__1)
                                    lcl_3 = lcl_4
                                lcl_2 = lcl_3
                            else:
                                lcl_3 = (_off_2, 'ListCase lookahead failed')
                                lcl_3 = prim__cons(lcl_3, prim__nil)
                                lcl_3 = lcl_3
                                lcl_3 = (False, lcl_3)
                                lcl_2 = lcl_3
                            lcl_1 = lcl_2
                        else:
                            lcl_2 = (_off_2, 'ListCase got EOF')
                            lcl_3 = prim__cons(lcl_2, prim__nil)
                            lcl_2 = lcl_3
                            lcl_2 = (False, lcl_2)
                            lcl_1 = lcl_2
                    lcl_0 = lcl_1
                elif (lcl_1 == 34):
                    lcl_1 = parse_CommaCases(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        ListCase_a_2 = _slot_1
                        lcl_2 = prim__tokens.offset
                        _off_2 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 24):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_4 = _py_local_t
                                _slot_2 = lcl_4
                                lcl_4 = MKLRCommaList(ListCase_a_2)
                                lcl_4 = ListCase(lcl_4, none)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            elif (lcl_4 == 33):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_4 = _py_local_t
                                _slot_2 = lcl_4
                                lcl_4 = parse_Case(prim__state, prim__tokens)
                                _slot_3_check = lcl_4
                                lcl_4 = _slot_3_check[0]
                                lcl_4 = (lcl_4 is False)
                                if lcl_4:
                                    lcl_4 = _slot_3_check
                                else:
                                    lcl_5 = _slot_3_check[1]
                                    lcl_5 = lcl_5
                                    _slot_3 = lcl_5
                                    ListCase_tl_3 = _slot_3
                                    lcl_5 = 24
                                    try:
                                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                        if (_py_local_tk.idint is lcl_5):
                                            prim__tokens.offset += 1
                                        else:
                                            _py_local_tk = None
                                    except IndexError:
                                        _py_local_tk = None
                                    lcl_5 = _py_local_tk
                                    _slot_4 = lcl_5
                                    lcl_5 = (_slot_4 is None)
                                    if lcl_5:
                                        lcl_5 = prim__tokens.offset
                                        lcl_5 = (lcl_5, 'quote ] not match')
                                        lcl_5 = prim__cons(lcl_5, prim__nil)
                                        lcl_5 = lcl_5
                                        lcl_5 = (False, lcl_5)
                                    else:
                                        lcl_5 = MKLRCommaList(ListCase_a_2)
                                        lcl_5 = ListCase(lcl_5, ListCase_tl_3)
                                        _slot_local__1 = lcl_5
                                        lcl_5 = (True, _slot_local__1)
                                    lcl_4 = lcl_5
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = (_off_2, 'ListCase lookahead failed')
                                lcl_4 = prim__cons(lcl_4, prim__nil)
                                lcl_4 = lcl_4
                                lcl_4 = (False, lcl_4)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_2, 'ListCase got EOF')
                            lcl_4 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_4
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                        lcl_1 = lcl_2
                    lcl_0 = lcl_1
                else:
                    lcl_1 = (_off_1, 'ListCase lookahead failed')
                    lcl_2 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = lcl_2
                    lcl_1 = (False, lcl_1)
                    lcl_0 = lcl_1
            else:
                lcl_0 = (_off_1, 'ListCase got EOF')
                lcl_0 = prim__cons(lcl_0, prim__nil)
                lcl_0 = lcl_0
                lcl_0 = (False, lcl_0)
        return lcl_0

    def parse_Lit(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 35):
                lcl_2 = parse_SymExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    Lit_a_1 = _slot_0
                    _slot_local__1 = Lit_a_1
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 32):
                lcl_2 = parse_StrExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    Lit_a_1 = _slot_0
                    _slot_local__1 = Lit_a_1
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 21):
                lcl_2 = parse_BoolExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    Lit_a_1 = _slot_0
                    _slot_local__1 = Lit_a_1
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 22):
                lcl_2 = parse_BoolExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    Lit_a_1 = _slot_0
                    _slot_local__1 = Lit_a_1
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 23):
                lcl_2 = parse_List(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    Lit_a_1 = _slot_0
                    _slot_local__1 = Lit_a_1
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 30):
                lcl_2 = parse_NumExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    Lit_a_1 = _slot_0
                    _slot_local__1 = Lit_a_1
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 36):
                lcl_2 = parse_Id(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    Lit_a_1 = _slot_0
                    _slot_local__1 = Lit_a_1
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 34):
                lcl_2 = parse_ChrExpr(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    Lit_a_1 = _slot_0
                    _slot_local__1 = Lit_a_1
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'Lit lookahead failed')
                lcl_3 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_3
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'Lit got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_Match(prim__state, prim__tokens):
        lcl_0 = 25
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote match not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_Exp(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_1 = _slot_1_check[1]
                lcl_1 = lcl_1
                _slot_1 = lcl_1
                Match_exp_1 = _slot_1
                lcl_1 = 26
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_1):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_1 = _py_local_tk
                _slot_2 = lcl_1
                lcl_1 = (_slot_2 is None)
                if lcl_1:
                    lcl_1 = prim__tokens.offset
                    lcl_1 = (lcl_1, 'quote with not match')
                    lcl_1 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = lcl_1
                    lcl_1 = (False, lcl_1)
                else:
                    lcl_1 = parse_CaseExps(prim__state, prim__tokens)
                    _slot_3_check = lcl_1
                    lcl_1 = _slot_3_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_3_check
                    else:
                        lcl_2 = _slot_3_check[1]
                        lcl_2 = lcl_2
                        _slot_3 = lcl_2
                        Match_cases_2 = _slot_3
                        lcl_2 = prim__tokens.offset
                        _off_2 = lcl_2
                        lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_2:
                            lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_4 = lcl_4.idint
                            if (lcl_4 == 20):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_4 = _py_local_t
                                _slot_4 = lcl_4
                                lcl_4 = MKLRList(Match_cases_2)
                                lcl_4 = Match(Match_exp_1, lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            else:
                                lcl_4 = MKLRList(Match_cases_2)
                                lcl_4 = Match(Match_exp_1, lcl_4)
                                _slot_local__1 = lcl_4
                                lcl_4 = (True, _slot_local__1)
                                lcl_3 = lcl_4
                            lcl_2 = lcl_3
                        else:
                            lcl_3 = (_off_2, 'Match got EOF')
                            lcl_4 = prim__cons(lcl_3, prim__nil)
                            lcl_3 = lcl_4
                            lcl_3 = (False, lcl_3)
                            lcl_2 = lcl_3
                        lcl_1 = lcl_2
                lcl_0 = lcl_1
        return lcl_0

    def parse_Nest(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 35):
                lcl_2 = parse_Lit(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    Nest_hd_1 = _slot_0
                    _slot_local__1 = Nest_hd_1
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 32):
                lcl_2 = parse_Lit(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    Nest_hd_1 = _slot_0
                    _slot_local__1 = Nest_hd_1
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 21):
                lcl_2 = parse_Lit(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    Nest_hd_1 = _slot_0
                    _slot_local__1 = Nest_hd_1
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 22):
                lcl_2 = parse_Lit(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    Nest_hd_1 = _slot_0
                    _slot_local__1 = Nest_hd_1
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 23):
                lcl_2 = parse_Lit(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    Nest_hd_1 = _slot_0
                    _slot_local__1 = Nest_hd_1
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 16):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_2 = _py_local_t
                _slot_0 = lcl_2
                lcl_2 = parse_Exp(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = _slot_1_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_1_check
                else:
                    lcl_2 = _slot_1_check[1]
                    lcl_2 = lcl_2
                    _slot_1 = lcl_2
                    Nest_hd_1 = _slot_1
                    lcl_2 = 17
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_2):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_2 = _py_local_tk
                    _slot_2 = lcl_2
                    lcl_2 = (_slot_2 is None)
                    if lcl_2:
                        lcl_2 = prim__tokens.offset
                        lcl_2 = (lcl_2, 'quote ) not match')
                        lcl_2 = prim__cons(lcl_2, prim__nil)
                        lcl_2 = lcl_2
                        lcl_2 = (False, lcl_2)
                    else:
                        _slot_local__1 = Nest_hd_1
                        lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 30):
                lcl_2 = parse_Lit(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    Nest_hd_1 = _slot_0
                    _slot_local__1 = Nest_hd_1
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 36):
                lcl_2 = parse_Lit(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    Nest_hd_1 = _slot_0
                    _slot_local__1 = Nest_hd_1
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 34):
                lcl_2 = parse_Lit(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    Nest_hd_1 = _slot_0
                    _slot_local__1 = Nest_hd_1
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'Nest lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'Nest got EOF')
            lcl_2 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_2
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_NestCase(prim__state, prim__tokens):
        lcl_0 = 16
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote ( not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_Case(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_1 = _slot_1_check[1]
                lcl_1 = lcl_1
                _slot_1 = lcl_1
                NestCase_hd_1 = _slot_1
                lcl_1 = 17
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_1):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_1 = _py_local_tk
                _slot_2 = lcl_1
                lcl_1 = (_slot_2 is None)
                if lcl_1:
                    lcl_1 = prim__tokens.offset
                    lcl_1 = (lcl_1, 'quote ) not match')
                    lcl_1 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = lcl_1
                    lcl_1 = (False, lcl_1)
                else:
                    _slot_local__1 = NestCase_hd_1
                    lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
        return lcl_0

    def parse_NumCase(prim__state, prim__tokens):
        lcl_0 = 30
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'number not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            NumCase_n_1 = _slot_0
            lcl_0 = MKNum(NumCase_n_1)
            lcl_0 = NumCase(lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_NumExpr(prim__state, prim__tokens):
        lcl_0 = 30
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'number not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            NumExpr_a_1 = _slot_0
            lcl_0 = MKNum(NumExpr_a_1)
            lcl_0 = NumExpr(lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_Open(prim__state, prim__tokens):
        lcl_0 = 6
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'quote open not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = prim__tokens.offset
            _off_1 = lcl_0
            lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_0:
                lcl_1 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_1 = lcl_1.idint
                if (lcl_1 == 32):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_1 = _py_local_t
                    _slot_1 = lcl_1
                    Open_string_2 = _slot_1
                    lcl_1 = MKStr(Open_string_2)
                    lcl_1 = OpenString(lcl_1)
                    _slot_local__1 = lcl_1
                    lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                elif (lcl_1 == 36):
                    lcl_1 = parse_Id(prim__state, prim__tokens)
                    _slot_1_check = lcl_1
                    lcl_1 = _slot_1_check[0]
                    lcl_1 = (lcl_1 is False)
                    if lcl_1:
                        lcl_1 = _slot_1_check
                    else:
                        lcl_1 = _slot_1_check[1]
                        lcl_1 = lcl_1
                        _slot_1 = lcl_1
                        Open_ident_2 = _slot_1
                        lcl_1 = OpenId(Open_ident_2)
                        _slot_local__1 = lcl_1
                        lcl_1 = (True, _slot_local__1)
                    lcl_0 = lcl_1
                else:
                    lcl_1 = (_off_1, 'Open lookahead failed')
                    lcl_1 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = lcl_1
                    lcl_1 = (False, lcl_1)
                    lcl_0 = lcl_1
            else:
                lcl_0 = (_off_1, 'Open got EOF')
                lcl_0 = prim__cons(lcl_0, prim__nil)
                lcl_0 = lcl_0
                lcl_0 = (False, lcl_0)
        return lcl_0

    def parse_OrCase(prim__state, prim__tokens):
        lcl_0 = parse_AndCaseRoot(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('OrCase', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = lr_loop_OrCase(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = (True, lcl_0)
        return lcl_0

    def parse_OrExp(prim__state, prim__tokens):
        lcl_0 = parse_OrExpRoot(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            OrExp_it_0 = _slot_0
            lcl_0 = MKLRCommaList(OrExp_it_0)
            lcl_0 = Or(lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_OrExpRoot(prim__state, prim__tokens):
        lcl_0 = parse_AndExp(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            lcl_0 = (_slot_0,)
            lcl_0 = prim__mk__ast('OrExpRoot', lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = lr_loop_OrExpRoot(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = (True, lcl_0)
        return lcl_0

    def parse_START(prim__state, prim__tokens):
        lcl_0 = 0
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'BOF not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            lcl_0 = parse_Top(prim__state, prim__tokens)
            _slot_1_check = lcl_0
            lcl_0 = _slot_1_check[0]
            lcl_0 = (lcl_0 is False)
            if lcl_0:
                lcl_0 = _slot_1_check
            else:
                lcl_1 = _slot_1_check[1]
                lcl_1 = lcl_1
                _slot_1 = lcl_1
                lcl_1 = 1
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_1):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_1 = _py_local_tk
                _slot_2 = lcl_1
                lcl_1 = (_slot_2 is None)
                if lcl_1:
                    lcl_1 = prim__tokens.offset
                    lcl_1 = (lcl_1, 'EOF not match')
                    lcl_1 = prim__cons(lcl_1, prim__nil)
                    lcl_1 = lcl_1
                    lcl_1 = (False, lcl_1)
                else:
                    lcl_1 = (_slot_0, _slot_1, _slot_2)
                    lcl_1 = prim__mk__ast('START', lcl_1)
                    _slot_local__1 = lcl_1
                    lcl_1 = (True, _slot_local__1)
                lcl_0 = lcl_1
        return lcl_0

    def parse_Stmt(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 6):
                lcl_2 = parse_Open(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    Stmt_it_1 = _slot_0
                    _slot_local__1 = Stmt_it_1
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            elif (lcl_2 == 3):
                lcl_2 = parse_Let(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_2 = _slot_0_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    Stmt_it_1 = _slot_0
                    _slot_local__1 = Stmt_it_1
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            elif (lcl_2 == 2):
                lcl_2 = parse_Do(prim__state, prim__tokens)
                _slot_0_check = lcl_2
                lcl_3 = _slot_0_check[0]
                lcl_2 = (lcl_3 is False)
                if lcl_2:
                    lcl_2 = _slot_0_check
                else:
                    lcl_2 = _slot_0_check[1]
                    lcl_2 = lcl_2
                    _slot_0 = lcl_2
                    Stmt_it_1 = _slot_0
                    _slot_local__1 = Stmt_it_1
                    lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'Stmt lookahead failed')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'Stmt got EOF')
            lcl_2 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_2
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_Stmts(prim__state, prim__tokens):
        lcl_0 = parse_Stmt(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            Stmts_a_0 = _slot_0
            lcl_0 = prim__tokens.offset
            _off_0 = lcl_0
            lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_0:
                lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_2 = lcl_2.idint
                if (lcl_2 == 6):
                    lcl_2 = parse_Stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        Stmts_b_1 = _slot_1
                        lcl_2 = Cons(Stmts_a_0, Stmts_b_1)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                    lcl_1 = lcl_2
                elif (lcl_2 == 3):
                    lcl_2 = parse_Stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        Stmts_b_1 = _slot_1
                        lcl_2 = Cons(Stmts_a_0, Stmts_b_1)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                    lcl_1 = lcl_2
                elif (lcl_2 == 2):
                    lcl_2 = parse_Stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_2
                    lcl_2 = _slot_1_check[0]
                    lcl_2 = (lcl_2 is False)
                    if lcl_2:
                        lcl_2 = _slot_1_check
                    else:
                        lcl_2 = _slot_1_check[1]
                        lcl_2 = lcl_2
                        _slot_1 = lcl_2
                        Stmts_b_1 = _slot_1
                        lcl_2 = Cons(Stmts_a_0, Stmts_b_1)
                        _slot_local__1 = lcl_2
                        lcl_2 = (True, _slot_local__1)
                    lcl_1 = lcl_2
                else:
                    lcl_2 = Cons(Stmts_a_0, nil)
                    _slot_local__1 = lcl_2
                    lcl_2 = (True, _slot_local__1)
                    lcl_1 = lcl_2
                lcl_0 = lcl_1
            else:
                lcl_1 = (_off_0, 'Stmts got EOF')
                lcl_1 = prim__cons(lcl_1, prim__nil)
                lcl_1 = lcl_1
                lcl_1 = (False, lcl_1)
                lcl_0 = lcl_1
        return lcl_0

    def parse_StrCase(prim__state, prim__tokens):
        lcl_0 = 32
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'str not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            StrCase_s_1 = _slot_0
            lcl_0 = MKStr(StrCase_s_1)
            lcl_0 = StrCase(lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_StrExpr(prim__state, prim__tokens):
        lcl_0 = 32
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'str not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            StrExpr_a_1 = _slot_0
            lcl_0 = MKStr(StrExpr_a_1)
            lcl_0 = StrExpr(lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_SymCase(prim__state, prim__tokens):
        lcl_0 = 35
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'sym not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            SymCase_a_1 = _slot_0
            lcl_0 = MKSym(SymCase_a_1)
            lcl_0 = SymCase(lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_SymExpr(prim__state, prim__tokens):
        lcl_0 = 35
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_0 = prim__tokens.offset
            lcl_0 = (lcl_0, 'sym not match')
            lcl_0 = prim__cons(lcl_0, prim__nil)
            lcl_0 = lcl_0
            lcl_0 = (False, lcl_0)
        else:
            SymExpr_a_1 = _slot_0
            lcl_0 = MKSym(SymExpr_a_1)
            lcl_0 = SymExpr(lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0

    def parse_Top(prim__state, prim__tokens):
        lcl_0 = parse_Stmts(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_0 = _slot_0_check[1]
            lcl_0 = lcl_0
            _slot_0 = lcl_0
            Top_stmts_0 = _slot_0
            lcl_0 = list(Top_stmts_0)
            lcl_0 = Top(lcl_0)
            _slot_local__1 = lcl_0
            lcl_0 = (True, _slot_local__1)
        return lcl_0
    return parse_START
