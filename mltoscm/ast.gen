abc AST;
abc Leaf(AST);

data Ident(Leaf) ident:str colno:int lineno:int;
data Str(Leaf) str:str colno:int lineno:int;
data Num(Leaf) num:object colno:int lineno:int;

abc Stmt(AST);
abc Exp(AST);
abc Case(AST);

data Top(AST) stmts:t.List[Stmt];

data Let(Stmt) ident:Ident is_rec:bool exp:Exp;
data OpenString(Stmt) path:Str;
data OpenId(Stmt) ident:Ident;
data Do(Stmt) exp:Exp;

data Or(Exp) exprs:t.List[Exp];
data And(Exp) exprs:t.List[Exp];

data BlockExpr(Exp) exprs:t.List[Exp];
data LetExp(Exp) stmt:Let exp:Exp;
data IfExp(Exp) cond:Exp tc:Exp fc:Exp;
data App(Exp) f:Exp args:t.List[Exp];
data Lam(Exp) args:t.List[Ident] body:Exp;
data Match(Exp) on:Exp cases:t.List[t.Tuple[Case, Exp, Exp]];

data BoolExpr(Exp) leaf:Num;
data SymExpr(Exp) leaf:Ident;
data ChrExpr(Exp) leaf:Str;
data NumExpr(Exp) leaf:Num;
data StrExpr(Exp) leaf:Str;

data List(Exp) elts:t.List[Exp] tl:t.Optional[Exp];

data BoolCase(Case) leaf:Num;
data SymCase(Case) leaf:Ident;
data ChrCase(Case) leaf:Str;
data NumCase(Case) leaf:Num;
data StrCase(Case) leaf:Str;

data ListCase(Case) elts:t.List[Case] tl:t.Optional[Case];
data AndCase(Case) cases:t.List[Case];
data OrCase(Case) cases:t.List[Case];